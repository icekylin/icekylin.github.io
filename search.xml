<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【Git 后悔药】撤销改动(add、commit)、强制同步</title>
      <link href="/posts/38611/"/>
      <url>/posts/38611/</url>
      
        <content type="html"><![CDATA[<blockquote><p>撤销 git add 和 git commit、强行与远程仓库进程同步</p></blockquote><h3 id="撤销-git-add-和-git-commit"><a href="#撤销-git-add-和-git-commit" class="headerlink" title="撤销 git add 和 git commit"></a>撤销 git add 和 git commit</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;Something&quot;</span><br></pre></td></tr></table></figure><p>在添加所有文件添加注释后需要撤回</p><ul><li>取消这一次的 commit: <code>git reset --soft HEAD^</code></li><li>取消 add 以及 commit: <code>git reset</code></li></ul><p><strong>参数解读:</strong></p><ul><li><code>HEAD^</code> 代表撤销到上一个版本, 如果需要撤销两个版本可以使用 <code>HEAD~2</code> 以此类推</li><li><code>--mixed</code> 不撤销代码改动, 撤销 commit 以及 add 的操作<ul><li><code>git reset --mixed</code> 相当于 <code>git reset</code></li></ul></li><li><code>--soft</code> 不撤销代码改动, 撤销 commit, 不撤销 add 操作</li><li><code>--hard</code> 撤销代码改动, 并撤销 commit 以及 add 操作</li></ul><h3 id="强行与远程仓库进程同步"><a href="#强行与远程仓库进程同步" class="headerlink" title="强行与远程仓库进程同步"></a>强行与远程仓库进程同步</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/main</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p><strong>参数解读:</strong></p><ol><li>拉取所有更新，不同步</li><li>本地代码同步线上最新版本(会覆盖本地所有与远程仓库上同名的文件)<ul><li>分支根据需求修改 <code>origin/分支</code></li></ul></li><li>再次同步</li></ol><hr><p><strong>Reference</strong>:</p><ul><li><a href="https://www.cnblogs.com/lfxiao/p/9378763.html">https://www.cnblogs.com/lfxiao/p/9378763.html</a></li><li><a href="https://blog.csdn.net/sinat_36184075/article/details/80115000">https://blog.csdn.net/sinat_36184075/article/details/80115000</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Integrated </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 并发编程实战，用多线程、多进程和多协程加速程序运行</title>
      <link href="/posts/57803/"/>
      <url>/posts/57803/</url>
      
        <content type="html"><![CDATA[<h3 id="0x00-引言"><a href="#0x00-引言" class="headerlink" title="0x00 引言"></a>0x00 引言</h3><h4 id="Python-并发编程简介"><a href="#Python-并发编程简介" class="headerlink" title="Python 并发编程简介"></a>Python 并发编程简介</h4><ol><li>为什么要引入并发编程<ul><li>场景1: 普通爬虫需要花费长时间的任务, 通过并发编程可以减少花费时间</li><li>场景2: APP 应用, 后台有大部分请求资源, 使用异步并发可以降低延迟</li><li>引入并发, 提升程序运行速度</li><li>学习掌握并发编程技术, 是程序员不可缺少的技能</li></ul></li><li>有哪些程序提速的方法<ul><li>可以通过四种方式提升程序运行速度: 单线程串行(不加改造的程序)、多线程并发(threading)、多CPU并行(multiprocessing)、多机器并行 (hadoop&#x2F;hive&#x2F;spark)</li><li>本节课程不会介绍多机器并行方式, 主要使用 threading、multiprocessing</li></ul></li><li>Python对并发编程的支持<ul><li>多线程: threading, 利用 CPU 和 IO 可以同时执行的原理, 让 CPU 不会干巴巴等待 IO 完成</li><li>多进程: multiprocessing, 利用多核心 CPu 的能力, 真正的并行执行任务</li><li>异步 IO: asyncio, 在单线程利用 CPU 和 IO 同时执行的原理, 实现函数异步执行</li><li>使用 Lock 对资源枷锁, 防止冲突访问</li><li>使用 Queue 实现不同进程&#x2F;现成间的数据通信, 实现生产者-消费者模式</li><li>使用线程池 Pool&#x2F;进程池 Pool, 简化线程&#x2F;进程的任务提交、等待结束、获取结果</li><li>使用 subprocess 启动外部程序的进程, 并进行输入输出交互</li></ul></li></ol><h4 id="怎样选择多线程、多进程和多协程"><a href="#怎样选择多线程、多进程和多协程" class="headerlink" title="怎样选择多线程、多进程和多协程"></a>怎样选择多线程、多进程和多协程</h4><ol><li>什么是 CPU 密集型计算、IO 密集型计算?<ul><li>CPU-bound (CPU 密集型)<ul><li>程序运行的速度受到 CPU 的限制</li><li>CPU 密集型也叫计算密集型, 是指 I&#x2F;O 在很的短时间内就可以完成, CPU 需要大量的计算和处理, 特点是 CPU 占用率相当高</li><li>例如: 压缩解压缩、加密解密、正则表达式搜索</li></ul></li><li>I&#x2F;O-bound (IO 密集型)<ul><li>程序运行的速度受到 I&#x2F;O 的限制</li><li>IO 密集型是指系统运作大部分的情况下是 CPU 在等待 I&#x2F;O (硬盘&#x2F;内存) 的读&#x2F;写操作, CPU 实际占用率较低</li><li>例如: 文件处理程序、网络爬虫程序、读写数据库程序</li></ul></li></ul></li><li>多线程、多进程、多协程的对比<ul><li>多进程 Process (multiprocessing)、多线程 Thread (threading)、多协程 Coroutine (asyncio)</li><li>一个进程中, 可以启动 N 个线程、一个线程中, 可以启动 N 个协程</li><li>多线程 Thread<ul><li>相比进程, 更轻量级, 占用资源少, 但在 Python 中多线程只能并发执行, 不能利用多 CPU (GIL 锁限制)</li><li>相比协程, 启动数目有限制, 占用内存资源, 有线程切换开销</li><li>主要适用于 I&#x2F;O 密集型计算、同时运行的任务数目要求不多</li></ul></li><li>多进程 Process<ul><li>可以利用多核 CPU 并行运算, 但占用资源最多, 可启动数目最少</li><li>主要适用于 CPU 密集型计算</li></ul></li><li>多协程 Coroutine<ul><li>内存开销最少, 启动协程数量最多, 缺点在于支持的库有限制, 如 requests 不支持协程, 需要使用 aiohttp 代替, 实现代码相对复杂</li><li>适用于 I&#x2F;O 密集型计算、需要超多任务运行、拥有现成库支持的场景</li></ul></li></ul></li></ol><p><img src="/../assets/img/Python%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%EF%BC%8C%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%A4%9A%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C/image-20221130165744847.png"></p><h4 id="GIL-全局解释器锁"><a href="#GIL-全局解释器锁" class="headerlink" title="GIL 全局解释器锁"></a>GIL 全局解释器锁</h4><p>相比 C&#x2F;C++&#x2F;Java, Python 确实慢, 在一些特殊场景下, Python 比 C++ 慢 100~200 倍</p><p>由于速度慢的原因, 很多公司的基础架构代码仍然在使用 C&#x2F;C++ 开发, 比如各大公司阿里、腾讯、快手的推荐引擎、搜索引擎、存储引擎等对性能要求高的模块</p><ol><li><p>Python 速度慢的原因:</p><ul><li>Python 是动态类型语言, 不像 C&#x2F;Java 需要编译后再执行, 而 Python 需要边解释边执行, Python 中的变量可以是数字也可以是字符, 同样在程序运行时, 需要不断检查变量的类型</li><li>Python 存在 GIL 锁, 无法利用多核 CPU 并发执行</li></ul></li><li><p>全局解释器锁 (Global Interpreter Lock, GIL)</p><ul><li>GIL 是计算机程序设计语言解释器用于同步的一种机制, 它使得任何时刻仅有一个线程在执行。即使在多核心处理器上, 使用 GIL 的解释器也只允许统一时间执行一个进程</li><li>With the GIL, you get cooperative multitasking<br>  <img src="/../assets/img/Python%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%EF%BC%8C%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%A4%9A%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C/image-20221130143125784.png"></li><li>When a thread is running, it holds the GIL</li><li>GIL released on I&#x2F;O (read,write,send,recv,etc.)</li></ul></li><li><p>为何会有 GIL 解释器锁</p><ul><li>Python 设计的初期, 为了规避并发问题引入了 GIL, 而到现在因为大部分都库都依赖于 GIL 而运行, 现在想去除而又去不掉了</li><li>GIL 主要存在的目的是为解决线程之间数据完整性和状态同步的问题, Python 中的对象管理, 是使用引用计数器进行的, 引用数为 0 则释放对象</li></ul></li><li><p>怎样规避 GIL 带来的限制</p></li></ol><p>多线程 threading 机制仍然是有用的, 用于 IO 密集型计算</p><ul><li>在 I&#x2F;O (read, write, send, recv, etc.) 期间, 线程会释放 GIL, 实现 CPU 和 IO 的并行, 因此在多线程用于 IO 密集型计算仍然可以大幅提升速度</li><li>但是多线程用于 CPU 密集型计算时, 只会更加拖慢速度</li></ul><p>使用 multiprocessing 的多进程机制实现并行计算、利用多核 CPU 优势, 为了应对 GIL 的问题, Python 提供了 multiprocessing</p><h3 id="0x01-利用多线程加速爬虫程序"><a href="#0x01-利用多线程加速爬虫程序" class="headerlink" title="0x01 利用多线程加速爬虫程序"></a>0x01 利用多线程加速爬虫程序</h3><h4 id="Python-创建多线程的方式"><a href="#Python-创建多线程的方式" class="headerlink" title="Python 创建多线程的方式"></a>Python 创建多线程的方式</h4><ul><li>首先准备任意一个函数</li><li>使用 <code>import threading</code> 导入多线程模块</li><li>使用 <code>t = threading.Thread(target=函数名称, args=(参数,))</code> 实例化一个线程对象</li><li>使用 <code>t.strat()</code> 启动这个线程, 使用 <code>t.join()</code> 等待这个线程结束</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line"><span class="built_in">print</span>(name)</span><br><span class="line"></span><br><span class="line">t = threading.Thread(target=func, args=(<span class="string">&quot;Python&quot;</span>,))</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br></pre></td></tr></table></figure><h4 id="单线程爬虫-VS-多线程爬虫速度对比"><a href="#单线程爬虫-VS-多线程爬虫速度对比" class="headerlink" title="单线程爬虫 VS 多线程爬虫速度对比"></a>单线程爬虫 VS 多线程爬虫速度对比</h4><ul><li>首先创建一个 <code>craw()</code> 函数, 调用 <code>requests</code> 模块, 向页面发送请求并返回 url 和页面长度</li><li>使用 for 循环结构依次调用 <code>craw()</code> 函数, 实现单线程调用, 并计算运行时间</li><li>使用 <code>threads</code> 变量存储线程对象, 并依此添加所有 url, 通过 for 循环所有线程对象启动和终止</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">craw</span>(<span class="params">url</span>):</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(url, <span class="built_in">len</span>(r.text))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">f&quot;https://www.cnblogs.com/sitehome/p/<span class="subst">&#123;page&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">51</span>)</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># single thread running</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;single thread running&#x27;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        craw(url)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;singe thread cost <span class="subst">&#123;time.time() - start_time&#125;</span> seconds.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># multi thread running</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;multi thread running&#x27;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        threads.append(threading.Thread(target=craw, args=(url,)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.start()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> thread <span class="keyword">in</span> threads:</span><br><span class="line">        thread.join()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;multi thread cost <span class="subst">&#123;time.time() - start_time&#125;</span> seconds.&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 程序运行结果</span><br><span class="line">single thread running</span><br><span class="line">https://www.cnblogs.com/sitehome/p/1 68683</span><br><span class="line">...</span><br><span class="line">https://www.cnblogs.com/sitehome/p/50 69779</span><br><span class="line">singe thread cost 3.5241050720214844 seconds.</span><br><span class="line">multi thread running</span><br><span class="line">https://www.cnblogs.com/sitehome/p/5 69428</span><br><span class="line">...</span><br><span class="line">https://www.cnblogs.com/sitehome/p/29 69997</span><br><span class="line">multi thread cost 0.5849659442901611 seconds.</span><br></pre></td></tr></table></figure><h2 id="0x02-生产者消费者模式多线程爬虫"><a href="#0x02-生产者消费者模式多线程爬虫" class="headerlink" title="0x02 生产者消费者模式多线程爬虫"></a>0x02 生产者消费者模式多线程爬虫</h2><h3 id="Pipeline-技术架构和生产者消费者模型"><a href="#Pipeline-技术架构和生产者消费者模型" class="headerlink" title="Pipeline 技术架构和生产者消费者模型"></a>Pipeline 技术架构和生产者消费者模型</h3><ol><li>多组件的 Pipeline 技术架构<ul><li>复杂的事情不会一下子做完, 而是分很多中间步骤一步步完成</li><li>比如说一个程序从输入数据到输出数据, 中间会经过多个处理器 (Processor), 每个处理器是一个处理模块, 这种将数据通过多个模块来处理的技术架构叫做 Pipeline 架构</li><li>生产者消费者模式就是典型的 Pipeline 架构, 生产者生产数据后, 会传递给消费者来消费数据</li><li>生产者传入的数据作为生产原料, 消费者输出的内容作为输出数据</li></ul></li><li>生产者消费者爬虫的架构<ul><li>生产者消费者架构相当于内部有两个 Processor</li><li>第一个 Processor 获取待爬取的 URL 进行网页的下载, 将下载好的内容放进一个 “网页队列”</li><li>第二个 Processor 消费 “网页队列” 中的数据进行解析, 并且把解析的结果进行存储</li></ul></li><li>Python 创建线程队列的方式<ul><li>使用 queue.Queue 可以用于多线程之间的、线程安全的数据通信</li><li>使用 <code>import queue</code> 导入队列类库</li><li>使用 <code>q = queueQueue()</code> 创建队列对象</li><li>使用 <code>q.put(item)</code> 添加元素<ul><li>当队列元素已满时会发生阻塞</li></ul></li><li>使用 <code>q.get()</code> 获取元素<ul><li>当队列元素为空时会发生阻塞</li></ul></li><li>使用 <code>q.qsize()</code> 查看元素大小</li><li>使用 <code>q.empty()</code> 判断队列是否为空</li><li>使用 <code>q.full()</code> 判断队列是否已满</li></ul></li></ol><h3 id="代码编写实现生产者消费者爬虫"><a href="#代码编写实现生产者消费者爬虫" class="headerlink" title="代码编写实现生产者消费者爬虫"></a>代码编写实现生产者消费者爬虫</h3><ul><li>先创建两个函数, <code>craw()</code> 用于获取页面 html 结果, <code>parse()</code> 用于提取页面元素</li><li>使用 <code>url_queue = queue.Queue()</code> 创建一个 url 队列的对象</li><li>使用 <code>html_queue = queue.Queue()</code> 创建一个 html 队列的对象</li><li>再创建两个队列函数, 无限循环并一直等待 queue 队列 <code>get</code> 或 <code>put</code> 传入或输出数据<ul><li><code>do_craw()</code> 线程通过 <code>url_queue.get()</code> 获取 url, 并将 url 传入 <code>craw()</code> 函数获取 html 内容, 再通过 <code>html_queue.put(html)</code> 将获取到的 html 内容传入 <code>html_queue</code> 队列</li><li><code>do_parse()</code> 线程通过 <code>html_queue.get()</code> 获取 <code>do_craw()</code> 传入的 html 内容, 调用 <code>parse()</code> 函数解析, 并将解析的结果直接输出</li></ul></li><li>通过 <code>for</code> 循环结构将 url 全部 <code>put</code> 进入 <code>url_queue</code> 队列</li><li>再通过 <code>for</code> 循环结构创建并启动指向 <code>do_craw()</code> 和 <code>do_parse()</code> 函数的多个线程</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> queue</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">craw</span>(<span class="params">url</span>):</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    links = soup.find_all(<span class="string">&quot;a&quot;</span>, class_=<span class="string">&quot;post-item-title&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> [(link[<span class="string">&quot;href&quot;</span>], link.get_text()) <span class="keyword">for</span> link <span class="keyword">in</span> links]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_craw</span>(<span class="params">url_queue, html_queue</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        url = url_queue.get()</span><br><span class="line">        html = craw(url)</span><br><span class="line">        html_queue.put(html)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">do_parse</span>(<span class="params">html_queue</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        html = html_queue.get()</span><br><span class="line">        results = parse(html)</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">f&quot;https://www.cnblogs.com/sitehome/p/<span class="subst">&#123;page&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">51</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    url_queue = queue.Queue()</span><br><span class="line">    html_queue = queue.Queue()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">        url_queue.put(url)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        t = threading.Thread(target=do_craw, args=(url_queue, html_queue), name=<span class="string">f&quot;craw<span class="subst">&#123;idx&#125;</span>&quot;</span>)</span><br><span class="line">        t.start()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">        t = threading.Thread(target=do_parse, args=(html_queue,), name=<span class="string">f&quot;parse<span class="subst">&#123;idx&#125;</span>&quot;</span>)</span><br><span class="line">        t.start()</span><br></pre></td></tr></table></figure><h2 id="0x03-线程安全问题以及-Lock-解决方案"><a href="#0x03-线程安全问题以及-Lock-解决方案" class="headerlink" title="0x03 线程安全问题以及 Lock 解决方案"></a>0x03 线程安全问题以及 Lock 解决方案</h2><h3 id="线程安全概念介绍"><a href="#线程安全概念介绍" class="headerlink" title="线程安全概念介绍"></a>线程安全概念介绍</h3><ul><li>线程安全指某个函数、函数库在多线程环境中被调用时, 能够正确地处理多个线程之间的共享变量, 使程序功能正确完成。</li><li>由于线程的执行随时会切换, 就造成了不可预料的结果, 出现线程不安全</li></ul><h3 id="Lock-用于解决线程安全问题"><a href="#Lock-用于解决线程安全问题" class="headerlink" title="Lock 用于解决线程安全问题"></a>Lock 用于解决线程安全问题</h3><ul><li>使用 <code>lock = threading.Lock()</code> 实例化一个线程锁对象</li><li>使用 <code>lock.acquire()</code> 锁定线程, 再使用 <code>lock.release()</code> 释放线程锁, 或是在执行代码前使用上下文管理 <code>with lock:</code> 后续执行的代码都将被设置线程锁, with 代码块内的代码运行结束后, 线程锁自动释放</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, balance</span>):</span><br><span class="line">        self.balance = balance</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">account, amount</span>):</span><br><span class="line">    <span class="keyword">with</span> lock:</span><br><span class="line">        <span class="keyword">if</span> account.balance &gt;= amount:</span><br><span class="line">            <span class="built_in">print</span>(threading.current_thread().name, <span class="string">&quot;取钱成功&quot;</span>)</span><br><span class="line">            account.balance -= amount</span><br><span class="line">            <span class="built_in">print</span>(threading.current_thread().name, <span class="string">&quot;余额&quot;</span>, account.balance)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(threading.current_thread().name, <span class="string">&quot;取钱, 余额不足&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    account = Account(<span class="number">1000</span>)</span><br><span class="line">    ta = threading.Thread(target=draw, args=(account, <span class="number">800</span>))</span><br><span class="line">    tb = threading.Thread(target=draw, args=(account, <span class="number">800</span>))</span><br><span class="line"></span><br><span class="line">    ta.start()</span><br><span class="line">    tb.start()</span><br></pre></td></tr></table></figure><h2 id="0x04-好用的线程池-ThreadPoolExecutor"><a href="#0x04-好用的线程池-ThreadPoolExecutor" class="headerlink" title="0x04 好用的线程池 ThreadPoolExecutor"></a>0x04 好用的线程池 ThreadPoolExecutor</h2><h3 id="线程池的生命周期和原理"><a href="#线程池的生命周期和原理" class="headerlink" title="线程池的生命周期和原理"></a>线程池的生命周期和原理</h3><ol><li>线程的生命周期状态包括新建、就绪、运行、终止和阻塞<ul><li>新建的线程通过 start 进入就绪状态, 此时线程并没有真正开始运行, 线程的运行需要系统进行调度</li><li>通过系统调度线程真正进入运行状态<ul><li>运行中的线程可能会因为失去 CPU 资源, 重新进入就绪状态</li><li>也有可能会因为遇到 sleep 或 io 进入阻塞状态, 等到 sleep 或 io 完成后重新进入就绪状态</li></ul></li><li>当线程运行完毕后线程进入终止状态</li></ul></li><li>线程池的原理<ul><li>新建线程系统时需要分配资源, 终止线程系统需要回收资源, 当系统中存在大量线程需要使用时, 会频繁的新建和终止线程, 会产生大量的时间开销和线程开销</li><li>如果可以重用线程, 则可以减去新建&#x2F;终止的开销</li><li>使用线程池时, 当有新的任务创建后, 新的任务会被放入任务队列中, 线程池会依次调用线程队列中的任务, 放入线程池中执行, 完成后会取下一个任务继续执行, 当所有线程都执行完成后, 线程池并不会销毁, 而是等待下一个任务的到来</li></ul></li><li>线程池的好处<ul><li>提升性能: 因为减去了大量新建、终止线程的开销, 重用了线程资源</li><li>适用场景: 适合处理突发性大量请求或是需要大量线程完成任务、但实际任务处理时间较短</li><li>防御功能: 能有效避免系统因为创建线程过多, 而导致系统负荷过大响应变慢等问题</li><li>代码优势: 使用线程池的语法比自己新建线程执行线程更加简洁</li></ul></li></ol><h3 id="ThreadPoolExecutor-的使用语法"><a href="#ThreadPoolExecutor-的使用语法" class="headerlink" title="ThreadPoolExecutor 的使用语法"></a>ThreadPoolExecutor 的使用语法</h3><ul><li>使用 <code>from concurrent.futures import ThreadPoolExecutor, as_completed</code> 导入模块</li><li>使用 <code>with ThreadPoolExecutor() as pool:</code> 实例化一个线程池对象<ul><li>在 with 语句内使用 <code>results = pool.map(函数名称, 参数列表)</code> 将每一个参数作用于线程池对象并获得返回结果</li><li>也可以使用列表推导式 <code>futures = [pool.submit(函数名称, 参数) for 参数 in 参数列表]</code> 的方式通过 <code>pool.submit</code> 给线程池传入对象</li><li>futures 返回对象的结果存储在 <code>futures.results()</code> 内, 两种遍历方式如下 (使用 as_completed 时返回的顺序是不一定的, 而普通的遍历是依次返回)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> feture <span class="keyword">in</span> futures:</span><br><span class="line"><span class="built_in">print</span>(future.result())</span><br><span class="line"><span class="keyword">for</span> future <span class="keyword">in</span> as_completed(futures):</span><br><span class="line"><span class="built_in">print</span>(future.result())</span><br></pre></td></tr></table></figure><h3 id="使用线程池改造爬虫程序"><a href="#使用线程池改造爬虫程序" class="headerlink" title="使用线程池改造爬虫程序"></a>使用线程池改造爬虫程序</h3><ul><li>craw 线程池<ul><li>使用 <code>with concurrent.futures.ThreadPoolExecutor() as pool:</code> 创建线程池对象</li><li>使用 <code>pool.map(craw, urls)</code> 将 urls 列表中每一个元素都传入 craw 函数, 作用与线程池</li><li>使用 <code>zip(urls, htmls)</code> 将 urls 的元素依次与 htmls 的元素对应生成一个 zip 对象 (url 对应 htmls)</li><li>通过 <code>for</code> 循环遍历输出 url 对应的 html 页面长度信息 (在程序内已经存在 htmls 列表)</li></ul></li><li>parse 线程池<ul><li>使用 <code>with concurrent.futures.ThreadPoolExecutor() as pool:</code> 创建线程池对象</li><li>使用 <code>for</code> 循环依次遍历 url 和 html 内容</li><li>使用 <code>pool.submit(parse, html)</code> 将 html 内容传入 parse 函数进行解析</li><li>创建一个 <code>futures</code> 字典用来存储 url 以及对应提取后的内容</li><li>使用 <code>futures[future] = url</code> 为字典填入 url 和提取后的内容</li><li>最后通过 for 循环遍历 <code>futures.items()</code> 字典的 url 和提取后的内容</li><li>(使用 as_completed 遍历元素时, 不可以同时使用 <code>items()</code> 函数, url 需要在循环结构内再次进行赋值)</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">craw</span>(<span class="params">url</span>):</span><br><span class="line">    r = requests.get(url)</span><br><span class="line">    <span class="keyword">return</span> r.text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">html</span>):</span><br><span class="line">    soup = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">    links = soup.find_all(<span class="string">&quot;a&quot;</span>, class_=<span class="string">&quot;post-item-title&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> [(link[<span class="string">&quot;href&quot;</span>], link.get_text()) <span class="keyword">for</span> link <span class="keyword">in</span> links]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    urls = [</span><br><span class="line">        <span class="string">f&quot;https://www.cnblogs.com/sitehome/p/<span class="subst">&#123;page&#125;</span>&quot;</span></span><br><span class="line">        <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">51</span>)</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># craw</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        htmls = pool.<span class="built_in">map</span>(craw, urls)</span><br><span class="line">        htmls = <span class="built_in">list</span>(<span class="built_in">zip</span>(urls, htmls))</span><br><span class="line">        <span class="keyword">for</span> url, html <span class="keyword">in</span> htmls:</span><br><span class="line">            <span class="built_in">print</span>(url, <span class="built_in">len</span>(html))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;craw over.&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># parse - 1</span></span><br><span class="line">    <span class="comment"># with concurrent.futures.ThreadPoolExecutor() as pool:</span></span><br><span class="line">    <span class="comment">#     futures = &#123;&#125;</span></span><br><span class="line">    <span class="comment">#     for url, html in htmls:</span></span><br><span class="line">    <span class="comment">#         future = pool.submit(parse, html)</span></span><br><span class="line">    <span class="comment">#         futures[future] = url</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#     for future, url in futures.items():</span></span><br><span class="line">    <span class="comment">#         print(url, future.result())</span></span><br><span class="line">    <span class="comment"># print(&#x27;parse over.&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># parse - 2</span></span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        futures = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> url, html <span class="keyword">in</span> htmls:</span><br><span class="line">            future = pool.submit(parse, html)</span><br><span class="line">            futures[future] = url</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(futures):</span><br><span class="line">            url = futures[future]</span><br><span class="line">            <span class="built_in">print</span>(url, future.result())</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="0x05-在-Web-服务中使用线程池加速"><a href="#0x05-在-Web-服务中使用线程池加速" class="headerlink" title="0x05 在 Web 服务中使用线程池加速"></a>0x05 在 Web 服务中使用线程池加速</h2><p>#Skip-Temporarily</p><ol><li>Web 服务的架构以及特点</li><li>使用线程池 ThreadPoolExecutor 加速</li><li>代码用 Flask 实现 Web 服务并实现加速</li></ol><h2 id="0x06-使用多进程-multiprocessing-加速程序运行"><a href="#0x06-使用多进程-multiprocessing-加速程序运行" class="headerlink" title="0x06 使用多进程 multiprocessing 加速程序运行"></a>0x06 使用多进程 multiprocessing 加速程序运行</h2><h3 id="为何有了多线程还需要多进程"><a href="#为何有了多线程还需要多进程" class="headerlink" title="为何有了多线程还需要多进程"></a>为何有了多线程还需要多进程</h3><ul><li>如果遇到了 CPU 密集型计算, 多线程反而会降低执行速度</li><li>虽然有全局解释器锁 GIL, 但因为有 IO 的存在, 多线程依然可以加速运行</li><li>CPU 密集型计算, 线程的自动切换反而变成了负担, 多线程甚至会减慢程序运行速度</li><li>multiprocessing 模块就是 Python 为了解决 GIL 缺陷引入的一个模块, 原理是用多进程在多 CPU 上并行执行</li><li>多进程和多线程的语法几乎完全相同, 如下图所示</li></ul><p><img src="/../assets/img/Python%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98%EF%BC%8C%E7%94%A8%E5%A4%9A%E7%BA%BF%E7%A8%8B%E3%80%81%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%92%8C%E5%A4%9A%E5%8D%8F%E7%A8%8B%E5%8A%A0%E9%80%9F%E7%A8%8B%E5%BA%8F%E8%BF%90%E8%A1%8C/image-20221201123223816.jpeg"></p><h3 id="单线程、多线程、多进程对比-CPU-密集计算速度"><a href="#单线程、多线程、多进程对比-CPU-密集计算速度" class="headerlink" title="单线程、多线程、多进程对比 CPU 密集计算速度"></a>单线程、多线程、多进程对比 CPU 密集计算速度</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ProcessPoolExecutor</span><br><span class="line">PRIMES = [<span class="number">112272535095293</span>] * <span class="number">100</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">is_prime</span>(<span class="params">number</span>):</span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> number == <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    sqrt_n = <span class="built_in">int</span>(math.floor(math.sqrt(number)))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, sqrt_n + <span class="number">1</span>, <span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> number % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">single_thread</span>():</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> PRIMES:</span><br><span class="line">        is_prime(number)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_thread</span>():</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        pool.<span class="built_in">map</span>(is_prime, PRIMES)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multi_process</span>():</span><br><span class="line">    <span class="keyword">with</span> ProcessPoolExecutor() <span class="keyword">as</span> pool:</span><br><span class="line">        pool.<span class="built_in">map</span>(is_prime, PRIMES)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    single_thread()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;single thread cost <span class="subst">&#123;time.time() - start_time&#125;</span> seconds&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    multi_thread()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;multi thread cost <span class="subst">&#123;time.time() - start_time&#125;</span> seconds&quot;</span>)</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    multi_process()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;multi process cost <span class="subst">&#123;time.time() - start_time&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 程序运行结果</span><br><span class="line">single thread cost 21.787539958953857 seconds</span><br><span class="line">multi thread cost 21.68295693397522 seconds</span><br><span class="line">multi process cost 2.8622336387634277 seconds</span><br></pre></td></tr></table></figure><h2 id="0x07-在-Flask-服务中使用进程池加速"><a href="#0x07-在-Flask-服务中使用进程池加速" class="headerlink" title="0x07 在 Flask 服务中使用进程池加速"></a>0x07 在 Flask 服务中使用进程池加速</h2><p>#Skip-Temporarily </p><h2 id="0x08-Python-异步-IO-实现并发爬虫"><a href="#0x08-Python-异步-IO-实现并发爬虫" class="headerlink" title="0x08 Python 异步 IO 实现并发爬虫"></a>0x08 Python 异步 IO 实现并发爬虫</h2><h3 id="协程的基本概念"><a href="#协程的基本概念" class="headerlink" title="协程的基本概念"></a>协程的基本概念</h3><ul><li>协程: 在单线程内实现并发</li><li>核心原理在于用一个超级循环 (其实就是 while true) 循环, 配合 IO 多路复用 (IO 时 CPU 可以做其他事)</li><li>在一个线程进行中的步骤为 CPU、等待 IO、CPU, 使用协程可以在中途等待 IO 完成后, 直接进入下一个任务的第一个 CPU 计算状态, 而不必等待结果返回后再进入下一个任务</li></ul><h3 id="Python-异步-IO-库-asyncio-使用"><a href="#Python-异步-IO-库-asyncio-使用" class="headerlink" title="Python 异步 IO 库 asyncio 使用"></a>Python 异步 IO 库 asyncio 使用</h3><ul><li>使用 <code>import asyncio</code> 导入异步 IO 库</li><li>使用 <code>async def 函数名称(参数)</code> 定义协程函数</li><li>携程函数内使用 <code>await 属性名称</code> 定义代码块, 不会等待, 而是直接切换到下一个任务</li><li>使用 <code>loop = asyncio.get_event_loop()</code> 获取事件循环 (超级循环)</li><li>使用 <code>tasks = [loop.create_task(函数名称(参数)) for url in urls]</code> 创建 task 列表</li><li>使用 <code>loop.run_until_complete(asyncio.wait(task))</code> 执行 task 列表</li><li>使用协程需要对应的库支持异步 IO 特性, 其中 requests 不支持异步, 而 aiohttp 支持</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> aiohttp</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">f&quot;https://www.cnblogs.com/sitehome/p/<span class="subst">&#123;page&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">51</span>)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">async_craw</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> aiohttp.ClientSession() <span class="keyword">as</span> session:</span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> session.get(url) <span class="keyword">as</span> resp:</span><br><span class="line">            result = <span class="keyword">await</span> resp.text()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span> <span class="subst">&#123;<span class="built_in">len</span>(result)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"></span><br><span class="line">tasks = [</span><br><span class="line">    loop.create_task(async_craw(url))</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urls]</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;async craw cost <span class="subst">&#123;time.time() - start_time&#125;</span> seconds.&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="0x09-在异步-IO-中使用信号量控制爬虫并发度"><a href="#0x09-在异步-IO-中使用信号量控制爬虫并发度" class="headerlink" title="0x09 在异步 IO 中使用信号量控制爬虫并发度"></a>0x09 在异步 IO 中使用信号量控制爬虫并发度</h2><h3 id="信号量-Semaphore"><a href="#信号量-Semaphore" class="headerlink" title="信号量 Semaphore"></a>信号量 Semaphore</h3><ul><li>信号量 (Semaphore) 又称为信号量, 旗语言</li><li>是一个同步对象, 用于保持在 0 至最大值之间的一个计数器</li><li>当线程完成一次对该 semaphore 对象的等待 (wait) 时, 该计数值减一</li><li>当线程完成一次对 semaphore 对象的释放 (release) 时, 计数值减一</li><li>当计数值为 0, 则线程等待该 semaphore 对象不再能成功直至该 semaphore 对象变成 signaled 状态</li><li>semaphore 对象的计数值大于 0, 为 signaled 状态, 计数值等于 0, 为 nonsignaled 状态</li></ul><h3 id="使用-Semaphore-模块控制并发度"><a href="#使用-Semaphore-模块控制并发度" class="headerlink" title="使用 Semaphore 模块控制并发度"></a>使用 Semaphore 模块控制并发度</h3><ul><li>使用 <code>sem = asyncio.Semaphore(10)</code> 实例化一个信号量对象</li><li>使用 <code>async with sem:</code> 语句块的代码都会遵循设置好的信号量运行</li><li>或是使用 <code>await sem.acquire()</code> 锁定信号量, 再 <code>try:</code> 语句执行代码, 最后通过 <code>finally: sem.release()</code> 释放信号量限制</li></ul><hr><p><strong>Reference:</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1bK411A7tV/">https://www.bilibili.com/video/BV1bK411A7tV/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20分钟CSS快速入门教程</title>
      <link href="/posts/39245/"/>
      <url>/posts/39245/</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-CSS-语法-结构、类型"><a href="#0x01-CSS-语法-结构、类型" class="headerlink" title="0x01 CSS 语法 (结构、类型)"></a>0x01 CSS 语法 (结构、类型)</h2><h3 id="CSS-结构"><a href="#CSS-结构" class="headerlink" title="CSS 结构"></a>CSS 结构</h3><ul><li>选择器 (Selector) 是用于选择 html 元素的, 选择器有很多种</li><li>由一个开始大括号 (Open Curly Brace) <code>&#123;</code> 开始</li><li>使用 <code>属性:属性值</code> (Property:Value) 来声明 (Declaration) 属性的属性值<ul><li>声明可以有多个声明, 多个声明使用分号 <code>;</code> 分隔</li></ul></li><li>最后使用结束大括号 <code>&#125;</code> 来结束 css 的定义</li><li>由选择器、开始大括号、声明内容、结束大括号构成了 css 规则</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">1200px</span>;</span><br><span class="line"><span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-样式类型"><a href="#CSS-样式类型" class="headerlink" title="CSS 样式类型"></a>CSS 样式类型</h3><ul><li>内敛样式 (Inline Style)<ul><li>直接在 HTML 元素的内部定义 <code>style</code> 属性, 直接使用 <code>style=属性:属性值</code> 来定义, 此时没有选择器, 内联样式仅对当前 HTML 元素生效</li></ul></li><li>样式 (Internal Style)<ul><li>在 HTML 文件内使用 <code>&lt;style&gt;&lt;/style&gt;</code> 标签来定义样式, 内部可以有一个或多个规则, 内部样式仅对当前 HTML 文件生效</li></ul></li><li>外部样式 (External Style)<ul><li>通过把 <code>&lt;link&gt;</code> 标签放在 <code>&lt;head&gt;&lt;/head&gt;</code> 标签内, 通过指定 <code>&lt;link&gt;</code> 标签的 <code>href</code> 属性, 并指定 <code>rel</code> 属性为 <code>stylesheet</code> 来指定外部 css 文件路径, 从而引入外部样式表, 引入的样式也仅对当前 HTML 生效, 外部样式表是我们使用最多, 可以被其他 HTML 文件引入</li></ul></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># style<span class="selector-class">.css</span></span><br><span class="line"><span class="selector-tag">h3</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: blue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># index.html</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-tag">h2</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">color</span>: green</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>h1 标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2 标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3 标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="0x02-选择器-Selector"><a href="#0x02-选择器-Selector" class="headerlink" title="0x02 选择器 (Selector)"></a>0x02 选择器 (Selector)</h2><h3 id="常见基础选择器"><a href="#常见基础选择器" class="headerlink" title="常见基础选择器"></a>常见基础选择器</h3><ul><li>类型选择器、类选择器、id 选择器和属性选择器都用于选择 HTML 元素</li><li>类型选择器<ul><li>用于选择页面上所有该类型的的元素, 直接选择 HTML 元素</li></ul></li><li>类选择器<ul><li>使用 <code>.类名</code> 来定义, 在 HTML 元素内指定 <code>class=类名</code> 就可以应用类选择器</li></ul></li><li>id 选择器<ul><li>使用 <code>#id名称</code> 来定义 id 选择器, 在 HTML 元素内指定 <code>id=id名称</code> 就可以应用 id 选择器</li></ul></li><li>属性选择器<ul><li>使用 <code>HTML标签[属性名]</code> 来定义属性选择器, 在标签内包含指定属性名称的元素, 都会应用属性选择器</li><li>也可以使用 <code>HTML标签[属性名=&quot;属性内容&quot;]</code> 来定义属性选择器</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.green_class</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#orange_id</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: orange</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-attr">[color_blue]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-attr">[color=<span class="string">&quot;gray&quot;</span>]</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: gray</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1 标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;green_class&quot;</span>&gt;</span>指定了 class=&quot;green_class&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;orange_id&quot;</span>&gt;</span>指定了 id=&quot;orange_id&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">color</span>=<span class="string">&quot;gray&quot;</span>&gt;</span>p 标签内指定了 color=&quot;gray&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../assets/img/20%E5%88%86%E9%92%9FCSS%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20221201163343096.png"></p><h3 id="组合使用选择器"><a href="#组合使用选择器" class="headerlink" title="组合使用选择器"></a>组合使用选择器</h3><ul><li>通用选择器<ul><li>使用 <code>*</code> 定义通用选择器, 会指定页面内所有 HTML 元素</li></ul></li><li>组合选择器<ul><li>选择器可以组合使用, 同时满足所有条件时, 选择器将会作用于对应的元素</li></ul></li><li>选择器也可以使用逗号 <code>,</code> 分隔, 同时指定指定多个选择器</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">*&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">font-size</span>: <span class="number">16px</span></span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-tag">h1</span><span class="selector-class">.blue</span>&#123;</span></span><br><span class="line"><span class="language-css"><span class="attribute">color</span>: blue</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span><span class="selector-id">#green</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#id</span><span class="selector-class">.cls</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:brown;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">font-size</span>: <span class="number">18px</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;blue&quot;</span>&gt;</span>指定了 class=&quot;blue&quot; 的 h1 标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;green&quot;</span>&gt;</span>指定了 id=&quot;green&quot; 的 h1 标签<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>指定了id=&quot;id&quot; class=&quot;cls&quot; 的 p 标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>指定多个选择器的 h2 标签<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>指定多个选择器的 h3 标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../assets/img/20%E5%88%86%E9%92%9FCSS%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20221201163301649.png"></p><h3 id="父级子级选择器"><a href="#父级子级选择器" class="headerlink" title="父级子级选择器"></a>父级子级选择器</h3><ul><li>使用 <code>父级元素 子级元素&#123;&#125;</code> 定义父级子级选择器, 只有在父级元素下的子级元素受样式表的影响</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h1</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>:red</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h2</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h3</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>一级标题下的 a 标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>二级标题下的 a 标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span>三级标题下的 a 标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../assets/img/20%E5%88%86%E9%92%9FCSS%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20221201163207966.png"></p><h2 id="0x03-选择器优先级-Priority"><a href="#0x03-选择器优先级-Priority" class="headerlink" title="0x03 选择器优先级 (Priority)"></a>0x03 选择器优先级 (Priority)</h2><ul><li>相同的规则按照加载顺序, 写在代码后面的优先级更高</li><li>继承下来的样式优先级永远低于直接指定的样式</li><li>内联样式优先级最高, <code>!important</code> 是个意外</li><li>ID 选择器 (ID Selector) &gt; 类选择器 (Class Selector) &gt; 类型选择器 (Type Selector)<ul><li>内部样式和外部样式的优先级没有区别, 主要在于在代码中的位置</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: orange</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">div</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">p</span><span class="selector-class">.cls</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.imp</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green<span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">h5</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: red</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.cls</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: green</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-id">#id</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">color</span>: blue</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span>&gt;</span>相同的规则按照加载顺序, 写在代码后面的优先级更高, 所以我是橙色而不是蓝色的<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我继承了 div 标签的样式, 我是绿色的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>我继承了 div 标签的样式, 也同时被选择器指定了样式, 我是红色的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span>&gt;</span>内联样式优先级最高, !important 是个意外<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: blue&quot;</span> <span class="attr">class</span>=<span class="string">&quot;imp&quot;</span>&gt;</span>.imp 指定了 !important 所以我绿了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span> <span class="attr">id</span>=<span class="string">&quot;id&quot;</span>&gt;</span>ID 选择器 (ID Selector) &gt; 类选择器 (Class Selector)<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">&quot;cls&quot;</span>&gt;</span>类选择器 (Class Selector) &gt; 类型选择器 (Type Selector)<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../assets/img/20%E5%88%86%E9%92%9FCSS%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20221201165151183.png"></p><h2 id="0x04-盒子模型-Box-Model"><a href="#0x04-盒子模型-Box-Model" class="headerlink" title="0x04 盒子模型 (Box Model)"></a>0x04 盒子模型 (Box Model)</h2><ul><li>盒子模型 (Box Model) 由四部分组成, CSS 中一切皆为盒子<ul><li>在外部的叫外边距 (margin)</li><li>向内一层的叫填充 (padding)</li><li>分开外边距和填充的叫做边框 (Border)</li><li>最中间包裹的是内容 (Content)</li></ul></li></ul><p><img src="/../../assets/img/20%E5%88%86%E9%92%9FCSS%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20221201165311486.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">3px</span> solid green;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* padding: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-top: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-bottom: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-left: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        padding-right: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-top: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-bottom: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-left: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        margin-right: 10px; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">9px</span> <span class="number">8px</span> <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>: <span class="number">7px</span> <span class="number">8px</span> <span class="number">9px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    内从 (Content)</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/../../assets/img/20%E5%88%86%E9%92%9FCSS%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/image-20221201170023268.png"></p><hr><p><strong>Reference:</strong></p><ul><li><a href="https://www.bilibili.com/video/BV1mS4y1Z7Ga">https://www.bilibili.com/video/BV1mS4y1Z7Ga</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML 30分钟入门教程</title>
      <link href="/posts/52777/"/>
      <url>/posts/52777/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-HTML"><a href="#什么是-HTML" class="headerlink" title="什么是 HTML"></a>什么是 HTML</h2><ul><li>超文本标记语言 (Hyper Text Mark-up Language, HTML)</li><li>它规定了自己的语法规则，用来表示比“文本”更丰富的意义，比如图片，表格，链接等。</li><li>浏览器（IE,FireFox等）软件知道HTML语言的语法，可以用来查看HTML文档。目前互联网上的绝大部分网页都是使用HTML编写的。</li></ul><h2 id="HTML是什么样的"><a href="#HTML是什么样的" class="headerlink" title="HTML是什么样的"></a>HTML是什么样的</h2><ul><li>简单地来说，HTML的语法就是给文本加上表明文本含义的标签(Tag)，让用户（人或程序）能对文本得到更好的理解。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;  </span><br><span class="line">  &lt;head&gt;  </span><br><span class="line">    &lt;title&gt;第一个Html文档&lt;/title&gt;  </span><br><span class="line">  &lt;/head&gt;  </span><br><span class="line">  &lt;body&gt;  </span><br><span class="line">    欢迎访问&lt;a href=<span class="string">&quot;https://deerchao.cn&quot;</span>&gt;deerchao的个人网页&lt;/a&gt;!  </span><br><span class="line">  &lt;/body&gt;  </span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ul><li>所有的HTML文档都应该有一个<code>&lt;html&gt;</code>标签，<code>&lt;html&gt;</code> 标签可以包含两个部分: <code>&lt;head&gt;</code> 和<code>&lt;body&gt;</code>。</li><li><code>&lt;head&gt;</code> 标签用于包含整个文档的一般信息，比如文档的标题 <code>&lt;title&gt;</code>，对整个文档的描述，文档的关键字等等。文档的具体内容就要放在 <code>&lt;body&gt;</code> 标签里了。</li><li><code>&lt;a&gt;</code> 标签用于表示链接，在浏览器（如IE,Firefox等）中查看HTML文档时，点击 <code>&lt;a&gt;</code> 标签括起来的内容时，通常会跳转到另一个页面。这个要跳转到的页面的地址由 <code>&lt;a&gt;</code> 标签的 <code>href</code> 属性指定。上面的 <code>&lt;a href=&quot;https://deerchao.cn&quot;&gt;</code> 中，href属性的值就是<a href="https://deerchao.cn./">https://deerchao.cn。</a></li></ul><h2 id="HTML文档可以包含的内容"><a href="#HTML文档可以包含的内容" class="headerlink" title="HTML文档可以包含的内容"></a>HTML文档可以包含的内容</h2><ul><li>文本: HTML对文本的支持是最丰富的，你可以设置不同级别的标题，分段和换行，可以指定文本的语义和外观，可以说明文本是引用自其它的地方，等等等等。</li><li>链接: 链接用来指出内容与另一个页面或当前页面某个地方有关。</li><li>图片: 图片用于使页面更加美观，或提供更多的信息。</li><li>列表: 列表用于说明一系列条目是彼此相关的。</li><li>表格: 表格是按行与列将数据组织在一起的形式。也有不少人使用表格进行页面布局。</li><li>表单: 表单通常由文本输入框，按钮，多选框，单选框，下拉列表等组成，使HTML页面更有交互性。</li><li>框架: 框架使页面里能包含其它的页面。</li></ul><h2 id="HTML文档格式详细说明"><a href="#HTML文档格式详细说明" class="headerlink" title="HTML文档格式详细说明"></a>HTML文档格式详细说明</h2><ul><li>在HTML文本中，用尖括号括起来的部分称为标签。如果想在正文里使用尖括号（或者大与号小与号，总之是同一个东西），必须使用字符转义，也就是说转换字符的原有意义。<code>&lt;</code> 应该使用 <code>&amp;lt</code>;代替，<code>&gt;</code> 则使用 <code>&amp;gt</code>;，至于 <code>&amp;</code> 符号本身,则应该使用 <code>&amp;amp;</code> 替代（不得不说的是有很多HTML文档没有遵循这个规则，常用的浏览器也都能够分析出&amp;到底是一个转义的开始，还是一个符号，但是这样做是不推荐的）。</li><li>标签本质上是对它所包含的内容的说明，可能会有属性，来给出更多的信息。比如 <code>&lt;img&gt;</code> （图片）标签有 <code>src</code> 属性（用于指明图片的地址），<code>width</code> 和 <code>height</code> 属性（用于说明图片的宽度和高度）。HTML里能使用哪些标签，这些标签分别可以拥有哪些属性，这些都是有规定的，知道了这里说的基本知识之后，学习HTML其实也就是学习这些标签了。本文后面会对常用的HTML标签做出简短的介绍。</li><li>标签通常有开始部分和结束部分（也被称为开始标签和结束标签），它们一起限定了这个标签所包含的内容。属性只能在开始标签中指定，属性值可以用单引号或双引号括起来。结束标签都以斜杠 <code>/</code> 加上标签名来表示。有时候，有些标签并不包含其它内容（只包括自己的属性，甚至连属性都没有），这种情况下，可以写成类似这样：<code>&lt;img src=&quot;logo.gif&quot; /&gt;</code>。注意最后的一个空格和一个反斜杠，它说明这个标签已经结束，不需要单独的结束标签了。</li><li>某些标签包含的内容中还可以有新的标签，新的标签名甚至可能还可以与包含它的标签的名称相同（哪些标签可以包含标签，可以包含哪些标签也是有规定的）。比如说在 <code>&lt;div&gt;&lt;/div&gt;</code> 内再嵌套一个 <code>&lt;div&gt;&lt;/div&gt;</code> 在这种情况下，最后出现的标签应该最先结束。</li><li>TML文档里所有的空白符（空格，Tab，换行，回车）会被浏览器忽略，唯一的例外是空格，对空格的处理方式是所有连续的空格被当成一个空格，不管有一个，还是两个，还是100个。之所以有这样的规则是因为忽略空白符能让使用HTML的作者以他觉得最方便的格式来排列内容，比如可以在每个标签开始后增加缩进，标签结束后减少缩进。由于英语文本中空格用得很普遍（用于分隔单词），所以对空格做了这样的特殊处理。如果要显示连续的空格（比如为了缩进），应该用 <code>&amp;nbsp;</code> 来代表空格。</li></ul><h2 id="常用标签介绍"><a href="#常用标签介绍" class="headerlink" title="常用标签介绍"></a>常用标签介绍</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><ul><li>使用 <code>&lt;font&gt;</code> 标签可以改变字体, 字号, 文字颜色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;6&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">&quot;4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;red&quot;</span> <span class="attr">size</span>=<span class="string">&quot;5&quot;</span>&gt;</span>红色的5<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span>黑体的字<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>&lt;b&gt;</code> 加粗字体, <code>&lt;i&gt;</code> 斜体, <code>&lt;u&gt;</code> 下划线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;b&gt;Bold&lt;/b&gt;</span><br><span class="line">&lt;i&gt;italic&lt;/i&gt;</span><br><span class="line">&lt;u&gt;underline&lt;/u&gt;</span><br></pre></td></tr></table></figure><ul><li>还有一些标签，用来指出包含的文本有特殊的意义，比如<code>&lt;abbr&gt;</code>（表示缩写），<code>&lt;em&gt;</code>（表示强调），<code>&lt;strong&gt;</code>（表示更强地强调）,<code>&lt;cite&gt;</code>（表示引用），<code>&lt;address&gt;</code>（表示地址）等等。这些标签不是为了定义显示效果而存在的，所以从浏览器里看它们可能没有任何效果，也可能不同的浏览器对这些标签的显示效果完全不同。</li><li><code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code>  由大到小定义了 1 ~ 6 级的标题</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><ul><li>使用 <code>&lt;hr&gt;</code>  标签可以在页面上添加分割线, 可以通过 <code>witdh</code> 和 <code>color</code> 属性来控制分割线的长度和颜色</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">hr</span> <span class="attr">width</span>=<span class="string">&quot;50%&quot;</span>, <span class="attr">color</span>=<span class="string">&quot;red&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;img&gt;</code> 标签用于在页面上添加图片, <code>src</code> 属性用来指定图片的地址, 如果 <code>src</code> 指向的图片无法打开, 会显示 <code>alt</code> 属性的文本</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://example.com&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;图片未找到&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><ul><li>超级链接用 <code>&lt;a&gt;</code> 标签表示, <code>href</code> 属性指定了链接的地址, <code>&lt;a&gt;</code> 标签可以包含文本, 也可以包含图片</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.google.com&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.google.com.hk/images/branding/googlelogo/2x/googlelogo_color_272x92dp.png&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="分段换行"><a href="#分段换行" class="headerlink" title="分段换行"></a>分段换行</h3><ul><li>由于 HTML 中的空白字符会被忽略, 可以通过 <code>&lt;p&gt;</code> 标签定义一个段落, 段落结束时会自动换行</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 第一段内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span> 第二段内容 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>也可以使用 <code>&lt;br&gt;</code> 标签来实现换行, <code>&lt;br&gt;</code> 也没有结束标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 <span class="tag">&lt;<span class="name">br</span>&gt;</span> 2 <span class="tag">&lt;<span class="name">br</span>&gt;</span> 3</span><br></pre></td></tr></table></figure><ul><li>有时，要把文档看作不同的部分组合起来的，比如一个典型的页面可能包括三个部分：页头，主体，页脚。<code>&lt;div&gt;</code>标签专门用于标明不同的部分：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>页面头部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>主题内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>页面尾部<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul><li>HTML文档在浏览器里通常是从左到右，从上到下地显示的，到了窗口右边就自动换行。为了实现分栏的效果，很多人使用表格 <code>&lt;table&gt;</code> 进行页面排版（虽然HTML里提供表格的本意不是为了排版）</li><li><code>&lt;table&gt;</code> 标签里通常会包含几个 <code>&lt;tr&gt;</code> 标签，<code>&lt;tr&gt;</code> 代表表格里的一行。<code>&lt;tr&gt;</code> 标签又会包含<code>&lt;td&gt;</code> 标签，每个 <code>&lt;td&gt;</code> 代表一个单元格。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2000<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>悉尼<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2004<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>雅典<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>2008<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt;tr&gt; </code>标签还可以被 <code>&lt;table&gt;</code> 里的 <code>&lt;thead&gt;</code>、<code> &lt;tbody&gt;</code> 或 <code>&lt;tfoot&gt;</code> 包含。它们分别代表表头，表正文，表脚。在打印网页的时候，如果表格很大，一页打印不完，<code>&lt;thead&gt;</code> 和 <code>&lt;tfoot&gt;</code> 将在每一页出现。</li><li><code>&lt;th&gt;</code> 和 <code>&lt;td&gt;</code> 非常相似，也用在 <code>&lt;tr&gt;</code> 边，不同的是 <code>&lt;th&gt;</code> 代表这个单元格是它所在的行或列的标题。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>html<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>python<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>11<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>表格用于表示二维数据（行，列），一维数据则用列表表示。列表可以分为无序列表 <code>&lt;ul&gt;</code>，有序列表<code>&lt;ol&gt;</code> 和定义列表 <code>&lt;dl&gt;</code>。前两种列表更常见一些，都用 <code>&lt;li&gt;</code> 标签包含列表项目。</li><li>无序列表表示一系列类似的项目，它们之间没有先后顺序。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Number 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Number 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>Number 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第一步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第二步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span>第三步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><ul><li>最后谈一下框架，曾经非常流行的技术，框架使一个窗口里能同时显示多个文档。主框架页里面没有 <code>&lt;body&gt;</code> 标签，取代它的是 <code>&lt;frameset&gt;</code>。</li><li><code>&lt;frameset&gt;</code> 标签的属性 <code>Rows</code> 和 <code>Cols</code> 用于指定框架集 (frameset) 里有多少行（列），以及每行（列）的高度（宽度）。</li><li><code>&lt;frameset&gt;</code> 标签可以包含 <code>&lt;frame&gt;</code> 标签，每个 <code>&lt;frame&gt;</code> 标签代表一个文档（src属性指定文档的地址）。</li><li>如果觉得这样的页面还不够复杂的话，还可以在 <code>&lt;frameset&gt;</code> 标签里包含 <code>&lt;frameset&gt;</code> 标签。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">frameset</span> <span class="attr">rows</span>=<span class="string">&quot;15%,*&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;top.html&quot;</span> <span class="attr">name</span>=<span class="string">title</span> <span class="attr">scrolling</span>=<span class="string">no</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">frameset</span> <span class="attr">cols</span>=<span class="string">&quot;20%,*&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;left.html&quot;</span> <span class="attr">name</span>=<span class="string">sidebar</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">frame</span> <span class="attr">src</span>=<span class="string">&quot;right.html&quot;</span> <span class="attr">name</span>=<span class="string">recipes</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">frameset</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="30分钟以后怎么办"><a href="#30分钟以后怎么办" class="headerlink" title="30分钟以后怎么办"></a>30分钟以后怎么办</h2><ul><li><p>这篇文章只是让从没有接触过HTML的人对HTML有个初步的印象，所以很多东西都没有谈到。本文并没有列出HTML中所有的标签，对于列出的标签也没有介绍它们的全部属性。</p></li><li><p>另外，没有提到的东西里还包括我觉得非常重要的CSS, JavaScript, XHTML, XML, Web Standards，以及它们与HTML的关系。不过这些也不太可能在30分钟内学会，好在只要入了门，就能利用网上很多资源继续学习。当然，如果有一本纸质书，就更好了，这方面我推荐 《HTML与XHTML权威指南》。下面是一些我觉得不错的网上资源：</p></li><li><p><a href="http://www.htmlcodetutorial.com/">HTML语言参考（英文）</a></p></li><li><p><a href="http://www.bjpeu.edu.cn/~yanglb/html/">HTML教程</a></p></li></ul><hr><p><strong>Reference:</strong></p><ul><li><a href="https://deerchao.cn/tutorials/html/html.htm">https://deerchao.cn/tutorials/html/html.htm</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>M1 Macbook Install Kali Linux Virtual Machine</title>
      <link href="/posts/53187/"/>
      <url>/posts/53187/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要解决安装时光标闪烁黑屏问题、以及后续的一些优化详情, 相关链接已置于文末</p></blockquote><h3 id="安装-Kali-Linux"><a href="#安装-Kali-Linux" class="headerlink" title="安装 Kali Linux"></a>安装 Kali Linux</h3><h4 id="UTM-配置步骤"><a href="#UTM-配置步骤" class="headerlink" title="UTM 配置步骤"></a>UTM 配置步骤</h4><ol><li>UTM 新建虚拟机, 选择 “虚拟化”</li></ol><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121160057545.png"></p><ol start="2"><li>选择 Linux</li></ol><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121160117155.png"></p><ol start="3"><li>确保前面两个选项都未勾选, 下方启动光盘选择 iso 文件后点击下一步</li></ol><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121160144547.png"></p><ol start="4"><li>内存建议 4096M、CPU 核心数 4 哥, 可以启用硬件 OpenGL 加速</li></ol><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121160448407.png"></p><ol start="5"><li>指定存储驱动器的大小至少大于 30G</li></ol><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121160414511.png"></p><ol start="6"><li>选择一个文件夹共享, 使 kali 内部可以访问 (可以不选)</li></ol><p> <img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121160432045.png"></p><ol start="7"><li>设置名称 (或者跳过) 后直接保存, 如开机后出现黑屏请继续往下看</li></ol><h4 id="安装时光标闪烁黑屏无画面"><a href="#安装时光标闪烁黑屏无画面" class="headerlink" title="安装时光标闪烁黑屏无画面"></a>安装时光标闪烁黑屏无画面</h4><p>右键虚拟机打开编辑, 左侧添加一个 “串行端口”, 添加后不需要进行设置, 直接点击保存后启动 Kali</p><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121160908852.png"></p><p>启动后会出现两个窗口, 其中一个窗口作为串口映射, 可解决安装时的黑屏问题</p><p>注意: 串口映射后仍然只能使用第一个 <code>Install</code> 模式进行安装, 而不能选择第二个 <code>Graphical Install</code>, 随后安装步骤不做详细介绍, 最后一步要求重启 Kali Linux 时, 点击右上角 Drive image options 图标, 选择 iso 文件点击弹出 (Eject), 弹出后回车 Continue 直接重启计算机</p><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121161855411.png"></p><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121161816987.png"></p><p>安装完成后可在 “编辑 -&gt; 显示” 勾选高分辨率模式, 并右键之前添加的 “串行端口” 选择删除 (remove)</p><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121161125680.png"></p><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/image-20221121164116341.png"></p><p>开机后依然黑屏尝试将 “显示” 设置中 “虚拟显卡” 修改为 <code>virtio-ramfb</code></p><p><img src="/../assets/img/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine/M1%20Macbook%20Install%20Kali%20Linux%20Virtual%20Machine_banner.png"></p><h3 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h3><h4 id="优化-apt-源"><a href="#优化-apt-源" class="headerlink" title="优化 apt 源"></a>优化 apt 源</h4><ol><li>自动配置:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/icekylin/AKali.git</span><br><span class="line"><span class="built_in">cd</span> AKali</span><br><span class="line">sudo python3 -m pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">sudo python3 akali.py</span><br></pre></td></tr></table></figure><ol start="2"><li>手动配置: (如果自动配置遇到问题时)</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/apt/sources.list</span><br></pre></td></tr></table></figure><p>添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 中科大源</span><br><span class="line">deb http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.ustc.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"># 浙江大学源</span><br><span class="line">deb http://mirrors.zju.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.zju.edu.cn/kali kali-rolling main non-free contrib</span><br><span class="line"># 阿里云源</span><br><span class="line">deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://mirrors.aliyun.com/kali kali-rolling main non-free contrib</span><br><span class="line"># 东软大学源</span><br><span class="line">deb http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line">deb-src http://mirrors.neusoft.edu.cn/kali kali-rolling/main non-free contrib</span><br><span class="line"># 新加坡kali源</span><br><span class="line">deb http://mirror.nus.edu.sg/kali/kali/ kali main non-free contrib</span><br><span class="line">deb-src http://mirror.nus.edu.sg/kali/kali/ kali main non-free contrib</span><br><span class="line">deb http://security.kali.org/kali-security kali/updates main contrib non-free</span><br><span class="line">deb http://mirror.nus.edu.sg/kali/kali-security kali/updates main contrib non-free</span><br><span class="line">deb-src http://mirror.nus.edu.sg/kali/kali-security kali/updates main contrib non-free</span><br><span class="line"># 官方源</span><br><span class="line">deb http://http.kali.org/kali kali-rolling main non-free contrib</span><br><span class="line">deb-src http://http.kali.org/kali kali-rolling main non-free contrib</span><br></pre></td></tr></table></figure><h4 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">apt list --upgradable</span><br><span class="line">sudo apt upgrade</span><br><span class="line">sudo apt dist-upgrade</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><h4 id="共享剪贴板"><a href="#共享剪贴板" class="headerlink" title="共享剪贴板"></a>共享剪贴板</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install qemu-guest-agent</span><br><span class="line">sudo apt install spice-vdagent</span><br></pre></td></tr></table></figure><p>安装完成后 <code>reboot</code> 重新启动, 参考链接 <a href="https://gist.github.com/plembo/21d4a1579850f7fe84301a90f4fcdf9a">https://gist.github.com/plembo/21d4a1579850f7fe84301a90f4fcdf9a</a></p><p>相关资源:</p><ul><li>UTM Virtual Machine: <a href="https://mac.getutm.app/">https://mac.getutm.app/</a></li><li>Kali-installer-images: <a href="https://www.kali.org/get-kali/#kali-installer-images">https://www.kali.org/get-kali/#kali-installer-images</a></li></ul><hr><p><strong>Reference:</strong></p><ul><li><a href="https://www.youtube.com/watch?v=9zdjQ9w_v_4&ab_channel=KskRoyal">How To Install Kali Linux 2022 On M1 &#x2F; M2 Mac Using UTM (EASY WAY)</a></li><li><a href="https://www.youtube.com/watch?v=WHlZEU5ejek">Install Kali on M1 Chip - UTM</a></li><li><a href="https://www.youtube.com/watch?v=Z2e-fRLxXnU">How To Install Kali Linux 2022 On M1 Mac | Run Kali Linux On Any Mac W&#x2F; Apple Silicon</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Planning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Virtual-Machine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Multithreading &amp; Multiprocess</title>
      <link href="/posts/3834/"/>
      <url>/posts/3834/</url>
      
        <content type="html"><![CDATA[<h2 id="1、并发编程理论"><a href="#1、并发编程理论" class="headerlink" title="1、并发编程理论"></a>1、并发编程理论</h2><blockquote><p>本章节中同步和异步阻塞和非阻塞较难理解, 只做了浅显的介绍, 如果需要深层次理解可以参考 <a href="https://www.zhihu.com/question/19732473">怎样理解阻塞非阻塞与同步异步的区别？</a> 问题下的回答</p></blockquote><h3 id="1-1-CPU-密集型与-I-x2F-O-密集型"><a href="#1-1-CPU-密集型与-I-x2F-O-密集型" class="headerlink" title="1-1 CPU 密集型与 I&#x2F;O 密集型"></a>1-1 CPU 密集型与 I&#x2F;O 密集型</h3><p>CPU 密集型 (CPU-bound):</p><ul><li>在执行数据处理、科学计算等任务时, CPU 的资源被大量使用, 这个任务属于 CPU-bound</li></ul><p>I&#x2F;O 密集型 (I&#x2F;O-bound):</p><ul><li>在进行交互操作、Web 应用等任务时, 大部分时间 CPU 都在等待 I&#x2F;O (输入&#x2F;输出) 任务的数据时, 这个任务属于 I&#x2F;O-bound</li></ul><h3 id="1-2-并发与并行"><a href="#1-2-并发与并行" class="headerlink" title="1-2 并发与并行"></a>1-2 并发与并行</h3><p>并发 (Concurency): 代表计算机可以同时执行多个任务</p><ul><li>单核处理器: 计算机通过分配时间片的方式, 让多个任务交替运行, 这个过程被称为进程或是线程的上下文切换 (context switching)</li></ul><p>并行 (Parallelism): 代表计算机同时处理多个任务</p><ul><li>多核处理器: 计算机调用多个处理器, 同时处理多个任务, 这种情况称为并行</li></ul><h3 id="1-3-进程与线程"><a href="#1-3-进程与线程" class="headerlink" title="1-3 进程与线程"></a>1-3 进程与线程</h3><p>进程 (Process):</p><ul><li>进程是操作系统中的一个基本概念, 它包含运行一个程序所需要的资源, 一个正在运行的应用程序在操作系统中被视为一个线程</li><li>进程之间是相对的, 一个进程无法访问另一个进程的数据 (除非使用分布式计算方式), 一个进程的失败同样不会影响其他进程</li><li>操作系统利进程将工作区划分为多个独立的区域, 进程作为程序的运行边界</li><li>简单来说一个进程就相当于一个正在运行的应用程序, 是应用程序的一次动态执行过程</li></ul><p>线程 (Thread):</p><ul><li>一个进程中可能存在一个或多个线程, 现成是操作系统分配处理器时间的基本单元, 可能有多个线程在同时执行代码</li><li>在进程入口执行的一个线程被称为程序的主线程</li><li>线程主要由 CPU 寄存器、调用栈和线程本低存储器 (Thread Local Storage, TLS) 组成<ul><li>CPU 寄存器主要记录当前执行线程的状态</li><li>调用栈主要用于维护线程所调用的内存与数据</li><li>TLS 主要用于存放线程的状态信息</li></ul></li><li>线程本身不是一个计算机硬件的功能, 而是操作系统提供的一种逻辑功能</li><li>多线程本质上是进程中一段并发执行的代码, 需要操作系统提供 CPU 资源来运行和调度</li></ul><p>进程和线程的区别</p><ul><li>进程拥有独立的地址空间, 进程崩溃后, 在保护模式下不会对其他进程产生影响</li><li>线程是一个进程中的不同执行路径, 线程有自己的堆栈和局部变量, 却没有自己单独的地址空间, 一个线程崩溃会导致整个进程结束</li><li>多进程的程序要比多线程的程序更安全可靠, 但在切换进程的时候, 资源耗费会比多线程更大, 效率相对较差</li><li>多线程的程序有自己的局部变量, 对于需要共享局部变量的并发操作, 只能使用多线程实现</li></ul><h3 id="1-4-同步与异步"><a href="#1-4-同步与异步" class="headerlink" title="1-4 同步与异步"></a>1-4 同步与异步</h3><p>同步和异步关注的是消息通信机制 (synchronous communication &#x2F; asynchronous communication)</p><p>同步 (Synchronous):</p><ul><li>“调用者” 主动发送一个 “调用”, 在没有得到结果之前, 这个调用就不会返回, 但是一旦调用返回, 就能直接获得返回值</li><li>同步相当于是由 “调用者” 主动等待这个 “调用” 的结果</li></ul><p>异步 (Asynchronous):</p><ul><li>与同步相反, 在 “调用” 发出后, 这个调用直接返回了, 此时并没有返回值</li><li>当一个异步过程的 “调用” 发出后, 调用者不会立即获得返回结果, 而是在 “调用” 发出后, “被调用者” 通过状态, 通知, 来告知 “调用者”, 或者通过 “回调函数” 处理这个调用</li></ul><blockquote><p>一个例子: 假设我需要知道我的卡里还剩下多少钱<br>同步通信机制下: 我 (“调用者”) 打电话给银行询问客服 (发送 “调用”), 客服告知正在查询, 并让我稍作等待, 于是我在通信的过程进行了等待, 稍后客服告知了我查询结果 (返回 “调用” 结果)<br>异步通信机制下: 我 (“调用者”) 打电话给银行询问客服 (发送 “调用”), 客服告知正在查询并挂断了电话 (不返回结果, 返回状态), 在等待结果期间, 我可以去做其他事情, 在查询完成后, 客服主动打电话告知我结果 (通知并”回调” 结果)</p></blockquote><ul><li>同步和异步实际上代表的是两种不同的编程模型, 可以通过多种方式来实现</li></ul><h3 id="1-5-阻塞与非阻塞"><a href="#1-5-阻塞与非阻塞" class="headerlink" title="1-5 阻塞与非阻塞"></a>1-5 阻塞与非阻塞</h3><p>阻塞和非阻塞描述的是程序在等待 “调用” 结果 (消息、返回值) 时的状态</p><p>阻塞调用是指在调用结果返回之前, 当前线程会被挂起, 调用线程只有在得到结果之后才会返回。</p><p>非阻塞调用指的是不能立刻得到结果之前, 该调用不会则当前线程</p><blockquote><p>依然假设我需要知道我卡里还剩多少钱<br>阻塞调用: 在客服告诉我结果之前, 我会把自己 “挂起” 直到客服告诉我结果<br>非阻塞调用: 无论客服是否告诉我结果, 我都会继续做其他事情, 并隔一段时间检查一下客服是否有返回结果<br>(这里的阻塞与非阻塞和同步异步无关, 跟客服用何种方式告知你返回结果也无关)</p></blockquote><p><strong>补充说明</strong><br>多线程 (Multi threading):</p><ul><li>多线程编程可以是实现异步的一种方式 (但并不是唯一), 创建多个线程一起运行<ul><li>(Python 中就可以使用 <code>async</code> 和 <code>await</code> 函数实现异步)</li></ul></li><li>在多核的环境下, 每个线程都会被分配到独立的核心上运行从而实现 “并行”</li><li>在单核的环境下, 操作系统会通过分配时间片的方式执行这些线程, 但也是 “并发” 地在执行<ul><li>单核 CPU 使用多线程主要应用在 IO 密集型任务时防止阻塞</li><li>Reference: <a href="https://www.zhihu.com/question/37396742/answer/71862529">对于单核cpu而言，开多线程的目的难倒只能是为了防止阻塞么？</a></li></ul></li><li>I&#x2F;O 密集型任务更加适合使用异步编程方式, 不一定适合多线程<ul><li>线程本身会占用内存, 切换线程也会占用资源</li></ul></li><li>计算量密集的应用程序通常都适合使用多线程计算</li><li>Reference: <a href="https://www.youtube.com/watch?v=I3E4MHTpABA">https://www.youtube.com/watch?v=I3E4MHTpABA</a></li></ul><h2 id="2、多线程-threading-模块"><a href="#2、多线程-threading-模块" class="headerlink" title="2、多线程 threading 模块"></a>2、多线程 threading 模块</h2><h3 id="2-1-创建和启动线程"><a href="#2-1-创建和启动线程" class="headerlink" title="2-1 创建和启动线程"></a>2-1 创建和启动线程</h3><h4 id="threading-Thread-创建线程"><a href="#threading-Thread-创建线程" class="headerlink" title="threading.Thread 创建线程"></a>threading.Thread 创建线程</h4><ul><li>使用 <code>import threading</code> 导入多线程模块</li><li>使用 <code>thread_obj = threading.Thread(target=函数名称, args=(参数1, 参数2))</code> 来定义多线程对象<ul><li><code>args</code> 只有一个参数时, 需要在第一个参数后跟上逗号 <code>,</code></li></ul></li><li>使用 <code>thread_obj.start()</code> 启动一个线程<ul><li>可以同时启动多个线程</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">n</span>):</span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n+<span class="number">1</span>):</span><br><span class="line">        total += i</span><br><span class="line">    <span class="built_in">print</span>(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread_obj1 = threading.Thread(target=func, args=(<span class="number">100</span>,))</span><br><span class="line">thread_obj2 = threading.Thread(target=func, args=(<span class="number">200</span>,))</span><br><span class="line"></span><br><span class="line">thread_obj1.start()  <span class="comment"># 5050</span></span><br><span class="line">thread_obj2.start()  <span class="comment"># 20100</span></span><br></pre></td></tr></table></figure><h4 id="重写-Thread-父类-run-方法实现多线程"><a href="#重写-Thread-父类-run-方法实现多线程" class="headerlink" title="重写 Thread 父类 run 方法实现多线程"></a>重写 Thread 父类 run 方法实现多线程</h4><ul><li>重写的多线程需要继承父类的 <code>__init__</code> 成员</li><li>重写 run 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span>(threading.Thread):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="built_in">super</span>(MyThread, self).__init__()</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(self.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">thread_obj1 = MyThread(<span class="string">&quot;Thread-1&quot;</span>)</span><br><span class="line">thread_obj2 = MyThread(<span class="string">&quot;Thread-2&quot;</span>)</span><br><span class="line"></span><br><span class="line">thread_obj1.start()  <span class="comment"># Thread-1</span></span><br><span class="line">thread_obj2.start()  <span class="comment"># Thread-2</span></span><br></pre></td></tr></table></figure><h4 id="计算子线程执行时间"><a href="#计算子线程执行时间" class="headerlink" title="计算子线程执行时间"></a>计算子线程执行时间</h4><ul><li>在执行 <code>sleep</code> 函数时将不会占用 CPU 资源, 程序将会被挂起</li><li>每个线程都可以添加一个 <code>join()</code> 方法等待线程结束, 当所有 <code>join()</code> 等待的线程都结束后, 主线程才会继续运行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">thread_list = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序主线程正在运行: &quot;</span>, threading.current_thread())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 输出当前线程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;子线程正在运行: <span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=func, args=(<span class="string">f&quot;Thread-<span class="subst">&#123;i&#125;</span>&quot;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    t.join()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;所有线程已结束, 花费时间: <span class="subst">&#123;time.time() - start_time&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;程序主线程运行结束: &quot;</span>, threading.current_thread())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Output</span></span><br><span class="line">程序主线程正在运行:  &lt;_MainThread(MainThread, started <span class="number">8779113728</span>)&gt;</span><br><span class="line">子线程正在运行: Thread-<span class="number">0</span>, &lt;Thread(Thread-<span class="number">1</span> (func), started <span class="number">6110244864</span>)&gt;</span><br><span class="line">子线程正在运行: Thread-<span class="number">1</span>, &lt;Thread(Thread-<span class="number">2</span> (func), started <span class="number">6127071232</span>)&gt;</span><br><span class="line">子线程正在运行: Thread-<span class="number">2</span>, &lt;Thread(Thread-<span class="number">3</span> (func), started <span class="number">6143897600</span>)&gt;</span><br><span class="line">所有线程已结束, 花费时间: <span class="number">3.013370990753174</span></span><br><span class="line">程序主线程运行结束:  &lt;_MainThread(MainThread, started <span class="number">8779113728</span>)&gt;</span><br></pre></td></tr></table></figure><h4 id="统计当前活跃的线程数"><a href="#统计当前活跃的线程数" class="headerlink" title="统计当前活跃的线程数"></a>统计当前活跃的线程数</h4><p>主线程比子线程执行要快, 当主线程执行 <code>active_count()</code> (返回当前活动的线程总数) 时, 其他子线程都没执行完毕, 可以在主线程使用 <code>threading.active_count()</code> 统计所有活跃线程的数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="comment"># 输出当前线程</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;子线程正在运行: <span class="subst">&#123;name&#125;</span>, <span class="subst">&#123;threading.current_thread()&#125;</span>&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动三个子线程</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=func, args=(<span class="string">f&quot;Thread-<span class="subst">&#123;i&#125;</span>&quot;</span>,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前活跃线程数量为: &quot;</span>, threading.active_count())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Output</span></span><br><span class="line">子线程正在运行: Thread-<span class="number">0</span>, &lt;Thread(Thread-<span class="number">1</span> (func), started <span class="number">6144815104</span>)&gt;</span><br><span class="line">子线程正在运行: Thread-<span class="number">1</span>, &lt;Thread(Thread-<span class="number">2</span> (func), started <span class="number">6161641472</span>)&gt;</span><br><span class="line">子线程正在运行: Thread-<span class="number">2</span>, &lt;Thread(Thread-<span class="number">3</span> (func), started <span class="number">6178467840</span>)&gt;</span><br><span class="line">当前活跃线程数量为:  <span class="number">4</span></span><br></pre></td></tr></table></figure><h4 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h4><ul><li>实例化时候指定 <code>daemon=True</code> 可以将线程设置为守护进程, 当主线程结束时, 守护进程也会结束</li><li>守护线程必须在线程 <code>start()</code> 方法之前设置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;子线程正在运行&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=func, args=(i,), daemon=<span class="literal">True</span>)</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;主线程结束, 共花费时间 %s&#x27;</span> % (time.time() - start_time))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Output</span></span><br><span class="line">子线程正在运行</span><br><span class="line">子线程正在运行</span><br><span class="line">子线程正在运行</span><br><span class="line">主线程结束, 共花费时间 <span class="number">0.00023508071899414062</span></span><br></pre></td></tr></table></figure><h3 id="2-2-线程安全"><a href="#2-2-线程安全" class="headerlink" title="2-2 线程安全"></a>2-2 线程安全</h3><h4 id="GIL-全局解释器锁"><a href="#GIL-全局解释器锁" class="headerlink" title="GIL 全局解释器锁"></a>GIL 全局解释器锁</h4><p><strong>GIL 锁的定义</strong></p><p>全局解释器锁（英语：Global Interpreter Lock，缩写GIL)</p><p>是计算机程序设计语言解释器用于同步线程的一种机制，它使得任何时刻仅有一个线程在执行。</p><p>即便在多核心处理器上，使用GL的解释器也只允许同一时间执行一个线程。</p><blockquote><p>在 Python 中即使多 CPU ，每个 CPU 的进程中的线程，同一时刻只能执行一个线程<br>而在其他大部分编程语言中是任意一个 “时刻” 一个cpu执行一个线程，多个cpu可以同时刻执行多个线程</p></blockquote><p> <strong>为何会有 GIL ?</strong></p><p>Python 设计初期, 为了规避多线程之间数据的完整性和状态同步问题, 引入了 GIL 这个概念, 发展至今大部分第三方库都依赖 GIL, 导致无法去除</p><p><strong>如何规避 GIL 带来的问题</strong></p><p>多线程 <code>threading</code> 机制依然是有用的，用于IO密集型计算, 因为在 I&#x2F;O (read, write, send, recv, etc) 期间，线程会释放GIL, 实现CPU和IO的并行, 因此多线程用于IO密集型计算依然可以大幅提升速度, 但是多线程用于CPU密集型计算时，只会更加拖慢速度</p><p>使用 <code>multiprocessing</code> 的多进程机制实现并行计算、利用多核CPU优势, 为了应对GIL的问题，Python提供了multiprocessing</p><p>简单来说遇到 CPU 密集型计算使用 <code>multiprocessing</code>, 相当于同时开启两个程序一起运行; 遇到 I&#x2F;O 密集型计算还是可以使用 <code>threading</code></p><h4 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h4><blockquote><p>代码在 <a href="https://c.runoob.com/compile/9/">https://c.runoob.com/compile/9/</a> 或 <a href="https://www.bejson.com/runcode/python3/">https://www.bejson.com/runcode/python3/</a> 进行测试</p></blockquote><ul><li>由于在多线程中, 所有线程共享一个变量, 当程序在运行一半时释放 GIl 锁, 可能导致出现数据混乱问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="keyword">global</span> total</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500000</span>):</span><br><span class="line">        total += <span class="number">1</span></span><br><span class="line">        total -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">    t = threading.Thread(target=func, args=())</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total)  <span class="comment"># 程序运行多次结果都有概率不同</span></span><br></pre></td></tr></table></figure><ul><li>使用互斥锁 (Lock)、递归锁 (RLock) 都可以避免这种情况发生</li></ul><h4 id="互斥锁-Lock"><a href="#互斥锁-Lock" class="headerlink" title="互斥锁 Lock"></a>互斥锁 Lock</h4><ul><li>使用 <code>lock_obj = threading.Lock()</code> 实例化一个互斥锁 (Mutual exclusion, Mutex) 对象</li><li><code>使用 lock_obj.acquire()</code> 可以锁定当前线程, 锁定线程若不解锁, 则不会进入下一个线程</li><li>使用 <code>lock_obj.release()</code> 释放线程锁, 释放线程锁后可以执行下一个线程</li><li>在操作数据前锁定线程, 在操作数据完后释放线程锁, 可以有效避免数据混乱的问题</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line">total = <span class="number">0</span></span><br><span class="line">mutex = threading.Lock()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line"><span class="keyword">global</span> total</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">500000</span>):</span><br><span class="line">mutex.acquire()</span><br><span class="line">total += <span class="number">1</span></span><br><span class="line">total -= <span class="number">1</span></span><br><span class="line">mutex.release()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">t = threading.Thread(target=func, args=())</span><br><span class="line">t.start()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(total)  <span class="comment"># 程序多次运行结果都为 0</span></span><br></pre></td></tr></table></figure><ul><li><code>Lock</code> 的互斥锁不支持嵌套结构, 假如在一个互斥锁锁内部再嵌套一个互斥锁, 可能造成死锁程序无法继续运行</li></ul><h4 id="递归锁-RLock"><a href="#递归锁-RLock" class="headerlink" title="递归锁 RLock"></a>递归锁 RLock</h4><ul><li>RLock 类的用法和 Lock 一样, 但是 RLock 支持嵌套结构, 可以在一个线程中上多个 RLock</li><li>只有当一个线程中所有的 <code>RLock</code> 都被 <code>release</code>, 后续的线程才能继续执行</li></ul><h4 id="信号量-Semaphore"><a href="#信号量-Semaphore" class="headerlink" title="信号量 Semaphore"></a>信号量 Semaphore</h4><ul><li>互斥锁和递归锁只允许一个线程修改数据, 而 Semaphore 最多可以允许 5 个线程同时修改数据</li><li>使用 <code>sem_obj = threading.BoundedSemaphore(信号量数量)</code> 实例化一个信号量对象</li><li>在线程中使用 <code>sem_obj.acquire()</code> 锁定当前线程</li><li>在线程中使用 <code>sem_obj.release()</code> 释放锁</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    sem_obj.acquire()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Thread <span class="subst">&#123;name&#125;</span> is running&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">3</span>)</span><br><span class="line">    sem_obj.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sem_obj = threading.BoundedSemaphore(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">21</span>):</span><br><span class="line">    t = threading.Thread(target=func, args=(i,))</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序每执行 5 个线程后将会等待 3 秒</span></span><br></pre></td></tr></table></figure><h3 id="2-3-事件-Event"><a href="#2-3-事件-Event" class="headerlink" title="2-3 事件 Event"></a>2-3 事件 Event</h3><ul><li>事件主要用于控制其他线程的执行, 事件是一个简单的线程同步对象</li><li>使用 <code>event_obj = threading.Event()</code> 定义一个事件对象</li><li>使用 <code>event_obj.wait()</code> 监听 Flag 状态</li><li>全局共享一个 Flag, 当 Flag 值为 <code>Flase</code> 时 <code>event.wait()</code> 就会阻塞, 反之则不阻塞</li><li>使用 <code>evene_obj.set()</code> 设置 Flag 为 <code>True</code></li><li>使用 <code>event_obj.clear()</code> 设置 Flag 为 <code>False</code></li><li>使用 <code>event_obj.is_set()</code> 判断 Flag 状态为 True 或 False</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">event = threading.Event()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">lights</span>():</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    event.<span class="built_in">set</span>()  <span class="comment"># 设置 Flag 为 True</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="number">5</span> &lt; count &lt;= <span class="number">10</span>:</span><br><span class="line">            event.clear()  <span class="comment"># count = 5 ~ 10 设置 Flag 为 False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\033[0;31m red light is on... <span class="subst">&#123;count&#125;</span>\033[0m <span class="subst">&#123;event.is_set()&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> count &gt; <span class="number">10</span>:</span><br><span class="line">            event.<span class="built_in">set</span>()  <span class="comment"># count &gt; 10 设置 Flag 为 True</span></span><br><span class="line">            count = <span class="number">0</span>    <span class="comment"># 将 count 清零重新计算</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;\033[0;32m green light is on... <span class="subst">&#123;count&#125;</span>\033[0m <span class="subst">&#123;event.is_set&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">car</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> event.is_set():  <span class="comment"># 检测 Flag 标志位是否为 False</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> is running...&#x27;</span>)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> Waiting for lights&#x27;</span>)</span><br><span class="line">            event.wait()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span> OK Let\&#x27;s go&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lights_thread = threading.Thread(target=lights, args=())</span><br><span class="line">car_thread = threading.Thread(target=car, args=(<span class="string">&quot;Taxi&quot;</span>,))</span><br><span class="line"></span><br><span class="line">lights_thread.start()</span><br><span class="line">car_thread.start()</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1. lights_thread 进程 start 时设置 Flag 为 True</span></span><br><span class="line"><span class="string">1. count 计数 5 秒绿灯</span></span><br><span class="line"><span class="string">2. 大于 5 时切换 Flag 为 Flase</span></span><br><span class="line"><span class="string">2. car_thread start 判断 Flag, 如果为 True, 则执行线程对象</span></span><br><span class="line"><span class="string">1. count 大于 10 时重新设置 Flag 为 True</span></span><br><span class="line"><span class="string">2. 以此反复</span></span><br><span class="line"><span class="string">3. 当 lights_thread 设置 Flag 为 Flase 时, car_thread 进入等待</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-条件-Condition"><a href="#2-4-条件-Condition" class="headerlink" title="2-4 条件 Condition"></a>2-4 条件 Condition</h3><ul><li><p>Condition被称为条件变量，除了提供与 <code>Lock</code> 类似的 <code>acquire</code> 和 <code>release</code> 方法外，还提供了 <code>wait</code> 和 <code>notify</code> 方法</p></li><li><p>使用 <code>cond_obj = threading.Conditon()</code> 实例化一个条件对象</p></li><li><p>首先由一个线程使用 <code>cond_obj.acquire()</code> 并且判断一个条件变量</p><ul><li>如果条件不满足则 <code>cond_obj.wait()</code> 进入状态</li><li>如果条件满足, 使用 <code>cond_obj,notify()</code> 通知其他方法, 其他处于 <code>wait</code> 状态的线程收到通知后会重新判断条件</li></ul></li><li><p>使用 <code>while True</code> 条件循环语句不断循环这一步骤, 实现不同线程通信</p></li><li><p>当调用 <code>wait</code>  方法时, 线程会释放 Condition 内部的锁使线程进入堵塞 (blocked) 状态, 同时在 waiting 池中记录这个线程, 当调用 <code>notify</code> 方法时, Condition 对象会从 waiting 池中挑选一个线程, 通知其调用 <code>acquire</code> 方法尝试获取到锁</p></li><li><p>Condition 对象的构造函数可以接受一个 Lock&#x2F;RLock 对象作为参数, 如果没有指定, 则 Conditon 对象会在内部创建一个 RLock</p></li><li><p>Conditon 对象还提供了 <code>notifyAll</code> 方法, 可以通知 waiting 池中所有的线程尝试 <code>acquire</code> 内部锁</p></li><li><p>处于 waiting 状态的线程只能通过 <code>notify</code> 方法唤醒, 可能导致某些线程永远处于等待状态, 使用 <code>notifyAll</code> 可以避免这种情况</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line">condition = threading.Condition()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">producer</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> condition.acquire():</span><br><span class="line">            <span class="keyword">global</span> count</span><br><span class="line">            <span class="keyword">if</span> count &lt;= <span class="number">3</span>:</span><br><span class="line">                count += <span class="number">10</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;生产者 +10 count=<span class="subst">&#123;count&#125;</span>&#x27;</span>)</span><br><span class="line">                condition.notify()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                condition.wait()</span><br><span class="line">            condition.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">consumer</span>():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> condition.acquire():</span><br><span class="line">            <span class="keyword">global</span> count</span><br><span class="line">            <span class="keyword">if</span> count &gt; <span class="number">3</span>:</span><br><span class="line">                count -= <span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;消费者 -1: count=<span class="subst">&#123;count&#125;</span>&#x27;</span>)</span><br><span class="line">                time.sleep(<span class="number">0.5</span>)</span><br><span class="line">                condition.notify()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                condition.wait()</span><br><span class="line">            condition.release()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p = threading.Thread(target=producer, args=())</span><br><span class="line">c = threading.Thread(target=consumer, args=())</span><br><span class="line">p.start()</span><br><span class="line">c.start()</span><br></pre></td></tr></table></figure><p><img src="/../assets/img/Python%20Multithreading%20&%20Multiprocess/image-20221120234217181.png"></p><p>Reference:</p><ul><li><a href="https://blog.csdn.net/brucewong0516/article/details/84587522">https://blog.csdn.net/brucewong0516/article/details/84587522</a></li></ul><h3 id="2-5-定时器-Timer"><a href="#2-5-定时器-Timer" class="headerlink" title="2-5 定时器 Timer"></a>2-5 定时器 Timer</h3><ul><li>定时器 Timer 指定 n 秒后再执行操作</li><li>定义线程对象时直接使用 <code>t_obj = threading.Timer(时间/秒, 函数名称)</code> 来定义定时器线程对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hello&#x27;</span>)</span><br><span class="line"></span><br><span class="line">t = threading.Timer(<span class="number">1</span>, func)</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><h2 id="3、多进程-multiprocessing-模块"><a href="#3、多进程-multiprocessing-模块" class="headerlink" title="3、多进程 multiprocessing 模块"></a>3、多进程 multiprocessing 模块</h2><h3 id="3-1-创建子进程"><a href="#3-1-创建子进程" class="headerlink" title="3-1 创建子进程"></a>3-1 创建子进程</h3><ul><li>使用 <code>import multiprocessing</code> 导入多进程模块</li><li>使用 <code>process_obj = multiprocessing.Process(target=函数名称, args=(参数1, 参数2))</code> 实例化一个多进程对象</li><li>使用 <code>process_obj.start()</code> 启动子进程</li><li>使用 <code>process_obj.join()</code> 等待进程结束</li><li>由于启动多线程时是启动了一个新的 Python 进程, 需要将 <code>process_obj.start()</code> 放入 <code>if __name__ == &quot;__main__&quot;</code> 条件判断语句内, 避免无限循环</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Subprocess is running ... [<span class="subst">&#123;os.getpid()&#125;</span>]&#x27;</span>)   <span class="comment"># Subprocess is running ... [58620]</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;  - Parent process pid is [<span class="subst">&#123;os.getppid()&#125;</span>]&#x27;</span>)  <span class="comment"># Parent process pid is [58618]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Parent process is running [<span class="subst">&#123;os.getpid()&#125;</span>]&#x27;</span>)   <span class="comment"># Parent process is running [58618]</span></span><br><span class="line">    p = multiprocessing.Process(target=func, args=())</span><br><span class="line">    p.start()</span><br><span class="line">    p.join()</span><br></pre></td></tr></table></figure><h3 id="3-2-进程间通信"><a href="#3-2-进程间通信" class="headerlink" title="3-2 进程间通信"></a>3-2 进程间通信</h3><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue()"></a>Queue()</h4><ul><li>使用 <code>from multiprocessing import Queue</code> 导入 <code>Queue</code> 模块</li><li>使用 <code>queue_obj = Queue()</code> 实例化一个 <code>Queue</code> 对象</li><li>启动子进程时, 需要将 <code>queue_obj</code> 作为参数传入</li><li>在进程中使用 <code>queue_obj.put(&#39;数据&#39;)</code> 存入数据</li><li>在任何位置使用 <code>queue_obj.get()</code> 获取 <code>Queue</code> 对象数据</li><li>更多 queue 对象方法参考 <a href="https://docs.python.org/zh-cn/3/library/queue.html#queue-objects">Queue对象 Python 3.10 文档</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Queue, Process</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">queue_obj</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Subprocess is running...&#x27;</span>)</span><br><span class="line">    queue_obj.put([<span class="string">&#x27;Hello World&#x27;</span>, <span class="string">&#x27;Hello Python&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    queue_obj = Queue()</span><br><span class="line">    process_obj = Process(target=func, args=(queue_obj,))</span><br><span class="line">    process_obj.start()</span><br><span class="line">    <span class="built_in">print</span>(queue_obj.get())  <span class="comment"># [&#x27;Hello World&#x27;, &#x27;Hello Python&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="Piep"><a href="#Piep" class="headerlink" title="Piep()"></a>Piep()</h4><ul><li>Pipe 类似于 socket 模块, 主要用于数据传递而不是数据共享, <code>pipe()</code> 返回两个连个链接对象分别为管道的两端, 每个连接对象都有 <code>send()</code> 发送、<code>recv()</code> 接受方法</li><li>使用 <code>from multiprocess import Pipe</code> 导入 Pipe 模块</li><li>使用 <code>parent_conn, child_conn = Pipe()</code> 实例化子进程和父进程两端的通讯对象</li><li>使用 <code>conn.send(obj)</code> 发送一个对象到连接的另一端</li><li>接收端使用 <code>conn.recv()</code> 接受另一方发送的数据, 该方法会阻塞直到收到对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pipe</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">child_conn</span>):</span><br><span class="line">    child_conn.send(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    parent_conn, child_conn = Pipe()</span><br><span class="line">    process_obj = Process(target=func, args=(child_conn,))</span><br><span class="line">    process_obj.start()</span><br><span class="line">    <span class="built_in">print</span>(parent_conn.recv())  <span class="comment"># Hello World</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Manager-管理线程"><a href="#3-3-Manager-管理线程" class="headerlink" title="3-3 Manager 管理线程"></a>3-3 Manager 管理线程</h3><ul><li>通过 Manager 可实现进程数据共享, Manager() 返回一个 manager 对象通过一个服务进程, 来使其他通过进程通过代理方式操作对象</li><li>manager 支持 <code>list</code> 、 <code>dict</code> 、 <code>Namespace</code> 、 <code>Lock</code> 、 <code>RLock</code> 、 <code>Semaphore</code> 、 <code>BoundedSemaphore</code> 、 <code>Condition</code> 、 <code>Event</code> 、 <code>Barrier</code> 、 <code>Queue</code> 、 <code>Value</code> 和 <code>Array</code> </li><li>使用 <code>from multiprocessing import Manager</code> 导入 Manager 模块</li><li>使用 <code>with Manager() as manager</code> 实例化一个 manager server 对象</li><li>使用 <code>manager_obj = manager.list()</code> 创建一个 manager 列表对象</li><li><code>manager_obj</code> 需要作为参数传入子进程</li><li>子进程可以直接操作 <code>manager_obj</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">l</span>):</span><br><span class="line">    l.append(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">with</span> Manager() <span class="keyword">as</span> manager:</span><br><span class="line">        manager_obj = manager.<span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">        p_list = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">            process_obj = Process(target=func, args=(manager_obj,))</span><br><span class="line">            process_obj.start()</span><br><span class="line">            p_list.append(process_obj)</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> p_list:</span><br><span class="line">            res.join()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(manager_obj)  <span class="comment"># [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span></span><br></pre></td></tr></table></figure><h3 id="3-4-进程锁-进程同步"><a href="#3-4-进程锁-进程同步" class="headerlink" title="3-4 进程锁 (进程同步)"></a>3-4 进程锁 (进程同步)</h3><ul><li>类似线程锁, 锁定当前进程后其他进程无法继续运行, 主要用于保证输出在同一屏幕而会两行合并为一行</li><li>使用 <code>lock = multiprocessing.Lock()</code> 实例化一个线程锁对象</li><li>使用 <code>lock.acquire()</code> 锁定一个线程</li><li>使用 <code>lock.release()</code> 释放一个线程</li></ul><h3 id="3-5-进程池"><a href="#3-5-进程池" class="headerlink" title="3-5 进程池"></a>3-5 进程池</h3><ul><li>由于进程间切换可能导致占用大量内存空间, 为防止这种情况可以使用进程池</li><li>使用 <code>from multiprocessing import Pool</code> 导入进程池模块</li><li>使用 <code>pool = Pool(数量)</code> 实例化 n 个进程池对象 (允许同时放入 5 个进程)</li><li>使用 <code>pool.apply(func=函数名称, args=(参数1, ))</code> 同步 (串行) 执行 n 个线程</li><li>使用 <code>pool.apply_async(func=函数名称, args=(参数1, ))</code> 异步 (并行) 执行 n 个线程</li><li>使用 <code>pool.close()</code> 等待所有进程结束后再关闭进程池</li><li>使用 <code>pool.join()</code> 等待所有子进程执行完毕后再结束主进程 (需要放在 <code>pool.close()</code> 之后)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Pool</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[<span class="subst">&#123;name&#125;</span>] Hello&#x27;</span>)</span><br><span class="line">    time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    pool = Pool(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">        pool.apply_async(func=func, args=(i,))</span><br><span class="line">    pool.close()</span><br><span class="line">    pool.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Pool End&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="4、协程"><a href="#4、协程" class="headerlink" title="4、协程"></a>4、协程</h2><ul><li>线程和进程是由程序处罚系统接口, 最后的执行者是系统, 它本质上操作系统提供的功能</li><li>协程的操作是程序员指定的, 在 Python 中拖过 yield, 人为的实现并发处理</li><li>协程的意义:<ul><li>对于多线程应用, CPU 通过切片方式来切换线程间的执行, 现成切换时, 需要消耗时间</li><li>协程只使用一个线程, 分解一个线程为多个 “微县城” 在一个线程中规定某个代码块的执行顺序</li></ul></li><li>协程应用场景:<ul><li>I&#x2F;O 密集型任务时 (大量操作不需要使用到 CPU)</li></ul></li><li>实现协程常用第三方模块 gevent 和 greenlet (gevent 是对 greenlet 的高级封装, 一般使用 gevent 即可)</li></ul><h3 id="4-1-greenlet"><a href="#4-1-greenlet" class="headerlink" title="4-1 greenlet"></a>4-1 greenlet</h3><ul><li>greenlet 通过 switch 方法在不同任务间切换</li><li>使用 <code>from greenlet import greenlet</code> 导入模块</li><li>使用 <code>gr_obj = greenlet(函数名称)</code> 实例化 greenlet 对象</li><li>使用 <code>gr_obj.switch()</code> 手动切换下一个对象</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> greenlet <span class="keyword">import</span> greenlet</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func1</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[1] Hello func&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[1] Conversion func2&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    gr_obj2.switch()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;End of&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func2</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[2] Hello&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;[2] Conversion func1&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    gr_obj1.switch()</span><br><span class="line"></span><br><span class="line">gr_obj1 = greenlet(func1)</span><br><span class="line">gr_obj2 = greenlet(func2)</span><br><span class="line">gr_obj1.switch()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Output</span></span><br><span class="line">[<span class="number">1</span>] Hello func</span><br><span class="line">[<span class="number">1</span>] Conversion func2</span><br><span class="line">[<span class="number">2</span>] Hello</span><br><span class="line">[<span class="number">2</span>] Conversion func1</span><br><span class="line">End of</span><br></pre></td></tr></table></figure><h3 id="4-2-gevent"><a href="#4-2-gevent" class="headerlink" title="4-2 gevent"></a>4-2 gevent</h3><ul><li>gevent 的代码封装度很高, 使用只需要了解基本方法</li><li>使用 <code>import gevent</code> 导入模块</li><li>使用 <code>gevent.joinall([gevent.spawn(函数, &quot;参数&quot;)])</code> 通过 <code>jioinall</code> 将任务函数和参数进行统一调度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;GET: <span class="subst">&#123;url&#125;</span>&#x27;</span>)</span><br><span class="line">    resp = requests.get(url)</span><br><span class="line">    data = resp.text</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> bytes received from <span class="subst">&#123;url&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(f, <span class="string">&quot;https://www.python.org/&quot;</span>),</span><br><span class="line">    gevent.spawn(f, <span class="string">&quot;https://www.bilibili.com/&quot;</span>)</span><br><span class="line">]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Output</span></span><br><span class="line">GET: https://www.python.org/</span><br><span class="line"><span class="number">50985</span> <span class="built_in">bytes</span> received <span class="keyword">from</span> https://www.python.org/</span><br><span class="line">GET: https://www.bilibili.com/</span><br><span class="line"><span class="number">4244</span> <span class="built_in">bytes</span> received <span class="keyword">from</span> https://www.bilibili.com/</span><br></pre></td></tr></table></figure><p>补充说明:</p><ul><li>全部完成后建议跟着 <a href="https://www.bilibili.com/video/BV1bK411A7tV">Python 并发编程实战，用多线程、多进程、多协程加速程序运行</a> 巩固实战案例</li><li>相关文章: <a href="https://icekylin.github.io/posts/57803/">Python 并发编程实战，用多线程、多进程和多协程加速程序运行</a></li></ul><hr><p><strong>Reference:</strong></p><ul><li><a href="https://www.youtube.com/watch?v=I3E4MHTpABA">一个视频告诉你并发、并行、异步、同步的区别</a></li><li><a href="https://www.cnblogs.com/whatisfantasy/p/6440585.html">搞定 Python 多线程和多进程</a></li><li><a href="https://blog.csdn.net/brucewong0516/article/details/84587522">详解threading模块：Condition类的使用（三）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Develop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次公益 SRC 上分思路</title>
      <link href="/posts/38206/"/>
      <url>/posts/38206/</url>
      
        <content type="html"><![CDATA[<blockquote><p>维护网络安全，营造良好的网络环境，文章仅供参考学习，请勿使用文中技术于非法用途，使用者造成任何负面影响与本人无关。</p></blockquote><h2 id="0x01-提前准备工作"><a href="#0x01-提前准备工作" class="headerlink" title="0x01 提前准备工作"></a>0x01 提前准备工作</h2><p>这里暂时排除使用GooleHack的语法，而是使用测绘站搜索CMS,缩小范围提高准确率。</p><p>需要使用到以下工具和文库</p><ul><li>佩奇文库: <a href="http://wiki.peiqi.tech/">http://wiki.peiqi.tech/</a></li><li>fofa: <a href="https://fofa.info/">https://fofa.info/</a></li><li>fofa_viewer: <a href="https://github.com/wgpsec/fofa_viewer">https://github.com/wgpsec/fofa_viewer</a></li><li>nuclei: <a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></li><li>批量查询权重: <a href="http://seo.iis7.com/">http://seo.iis7.com/</a></li><li>批量备案查询: <a href="http://www.jucha.com/beian/">http://www.jucha.com/beian/</a></li></ul><h2 id="0x02-使用POC测试单个站点"><a href="#0x02-使用POC测试单个站点" class="headerlink" title="0x02 使用POC测试单个站点"></a>0x02 使用POC测试单个站点</h2><h3 id="1-寻找可利用POC"><a href="#1-寻找可利用POC" class="headerlink" title="1. 寻找可利用POC"></a>1. 寻找可利用POC</h3><p>使用佩奇文库：<a href="http://wiki.peiqi.tech/wiki/cms/">http://wiki.peiqi.tech/wiki/cms/</a> 文库内部分漏洞存在可用POC，可提供我们测试学习，感谢大佬。</p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171557337.png" alt="image-20221115171557337"></p><p>主要针对 CMS 框架漏洞，框架漏洞有着清晰的指纹标识，方便批量寻找到目标。</p><h3 id="2-使用空间测绘站寻找资产"><a href="#2-使用空间测绘站寻找资产" class="headerlink" title="2. 使用空间测绘站寻找资产"></a>2. 使用空间测绘站寻找资产</h3><p>并不是所有漏洞都有现成的POC，又因为CMS对应的资产并不少，要找到一个可以利用的POC不一定是一件简单的事情。推荐找 <strong>可以通过GET传参得到返回结果的SQL注入</strong> ，毕竟点进URL只要粘贴就可以验证是否存在漏洞。</p><p>在文库内找到网络测绘搜索语句，使用 fofa、shodan、360quake 等测绘引擎搜索相关资产。</p><h3 id="3-试相关资产漏洞是否存在"><a href="#3-试相关资产漏洞是否存在" class="headerlink" title="3. 试相关资产漏洞是否存在"></a>3. 试相关资产漏洞是否存在</h3><p>带有破坏型的漏洞不推荐测试，仅测试回显结果可以证明存在漏洞的POC。注入只需要爆出数据库、任意文件上传只需要上传phpinfo而不是传个shell，目前我是这么理解。</p><p>这里选择的是一个普通的 SQL 注入，构建poc如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:example.com/search/index.php?keywordspan><br></pre></td></tr></table></figure><p>当页面发挥结果中包含 数据库用户名称、数据库地址则代表存在漏洞，至此为止。以下为图片说明</p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171630787.png" alt="image-20221115171630787"></p><h2 id="0x03-批量对站点进行检测"><a href="#0x03-批量对站点进行检测" class="headerlink" title="0x03 批量对站点进行检测"></a>0x03 批量对站点进行检测</h2><h3 id="1-将收集结果URL保存至本地"><a href="#1-将收集结果URL保存至本地" class="headerlink" title="1. 将收集结果URL保存至本地"></a>1. 将收集结果URL保存至本地</h3><p>可以通过测绘站接口，或是工具简单的实现，如 <a href="https://github.com/wgpsec/fofa_viewer">fofa_viewer</a></p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171636565.png" alt="image-20221115171636565"></p><p>将HOST字段保存至本地txt文件，此时你就得到了一个可能存在漏洞的站点列表。</p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171640822.png" alt="image-20221115171640822"></p><h3 id="2-编写POC或使用工具批量检测"><a href="#2-编写POC或使用工具批量检测" class="headerlink" title="2. 编写POC或使用工具批量检测"></a>2. 编写POC或使用工具批量检测</h3><p>这里稍微的犹豫了一下，要是用python requests写，那我要用到其他POC的时候，岂不是改起来很麻烦，之前了解过 <a href="https://github.com/projectdiscovery/nuclei/blob/master/README_CN.md">https://github.com/projectdiscovery/nuclei/blob/master/README_CN.md</a> 或许可以通过这个实现？</p><p>研究了一下，需要达成需求：向<code>https://example.com/search/index.php</code>发送指定 GET 请求，返回响应包内包含 <code>ORDER BY id DESC</code>字段的 URL，GET请求参数如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=<span class="number">1</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">33</span></span><br></pre></td></tr></table></figure><p>很简单，参考官方文档 <a href="https://nuclei.projectdiscovery.io/templating-guide/protocols/http/">https://nuclei.projectdiscovery.io/templating-guide/protocols/http/</a> “基础的HTTP请求” 编写一个 yaml 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必要字段 ID</span></span><br><span class="line"><span class="attr">id:</span> <span class="string">DocCMS-keyword-SQLi</span></span><br><span class="line"><span class="comment"># 必要字段INFO</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">DocCMS-keyword-SQLi</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">kylin</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">sqli,DocCMS</span></span><br><span class="line">    <span class="attr">reference:</span> <span class="string">http://wiki.peiqi.tech/wiki/cms/DocCMS/DocCMS%20keyword%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.html</span></span><br><span class="line">    <span class="attr">severity:</span> <span class="string">high</span></span><br><span class="line"><span class="comment"># HTTP请求数据包</span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="comment"># 原始数据包(RAW)内容</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      GET /search/index.php?keywordspan></span><br><span class="line"><span class="string">      Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string"></span>    <span class="comment"># 匹配字符串包含 ORDER BY id DESC</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">word</span></span><br><span class="line">        <span class="attr">words:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;ORDER BY id DESC&quot;</span></span><br></pre></td></tr></table></figure><p>再看一下官方文档 <a href="https://github.com/projectdiscovery/nuclei/blob/master/README_CN.md">https://github.com/projectdiscovery/nuclei/blob/master/README_CN.md</a> 使用参数调用模板文件获取扫描结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.调用 DocCMS-keyword-SQLi.yaml 模板，扫描 urls.txt 文件</span></span><br><span class="line"><span class="comment"># 2.将结果保存至 result_DocCMS-keyword-SQLi.txt</span></span><br><span class="line"><span class="comment"># 3.简化输出结果 重试次数10 超时时间30s</span></span><br><span class="line">nuclei -l urls.txt -t DocCMS-keyword-SQLi.yaml -o result_DocCMS-keyword-SQLi.txt -nm -retries 10 -<span class="built_in">timeout</span> 30</span><br></pre></td></tr></table></figure><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171647853.png" alt="image-20221115171647853"></p><p>然后哇的一下，扫描结果就全出来了</p><p>使用 nuclei 编写 yaml 对批量检测漏洞有很大的帮助，不过根据官方的定义 nuclei 还可以用作渗透测试的工作流，这里留个个小小的坑</p><h2 id="0x04-快速定位资产提交报告"><a href="#0x04-快速定位资产提交报告" class="headerlink" title="0x04 快速定位资产提交报告"></a>0x04 快速定位资产提交报告</h2><h3 id="1-正则筛选根域名"><a href="#1-正则筛选根域名" class="headerlink" title="1. 正则筛选根域名"></a>1. 正则筛选根域名</h3><p>因为扫描结果的URL并不是网站根域名，先简单针对扫描结果用正则匹配一下根域。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># awk 正则定位根域名</span></span><br><span class="line">awk -F <span class="string">&#x27;search&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> result_DocCMS-keyword-SQLi.txt &gt; domain_DocCMS-keyword-SQLi.txt</span><br></pre></td></tr></table></figure><h3 id="2-批量查询站点权重"><a href="#2-批量查询站点权重" class="headerlink" title="2. 批量查询站点权重"></a>2. 批量查询站点权重</h3><p>批量查询权重：<a href="http://seo.iis7.com/">http://seo.iis7.com/</a></p><p>确认提交的平台, 漏洞盒子提交无限制, 补天需要百度权重&gt;&#x3D;1或Google权重&gt;&#x3D;3</p><p>更多关于补天的注意事项可以参考这篇文章: <a href="https://blog.csdn.net/qq_37113223/article/details/111916474">关于补天SRC小白入门详细介绍</a> </p><p>针对爱站PC、爱站PE、GooglePR筛选查询结果</p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171652516.png" alt="image-20221115171652516"></p><h3 id="3-批量查询备案信息"><a href="#3-批量查询备案信息" class="headerlink" title="3. 批量查询备案信息"></a>3. 批量查询备案信息</h3><p>提交漏洞报告时，需要对公司名称以及公司定位做选择，这里有三个选择</p><ul><li><a href="http://www.jucha.com/beian/">批量备案查询</a> 免费额度用完了需要付费，免费额度500条</li><li><a href="https://icp.chinaz.com/">站长ICP备案查询</a> 不能批量查询，单个提交报告时也够用</li></ul><p>对于 <strong>批量查询站点权重</strong>、<strong>批量查询备案信息</strong> 本来都是有想法写个脚本来实现的，奈何这些0权站点实在不能给人带来动力.</p><p>提交漏洞的事情就交给另一个小倒霉蛋吧。</p>]]></content>
      
      
      <categories>
          
          <category> Security </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SRC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cyber Security Quick Start</title>
      <link href="/posts/40921/"/>
      <url>/posts/40921/</url>
      
        <content type="html"><![CDATA[<blockquote><p>很久以前学习过的一些较为基础的安全知识，列出了一些知识点、大致的规划；方便快速上手</p></blockquote><p>笔记不是刚需，但是当你第二次遇到同样简单的问题的时候，你还需要通过搜索引擎去查询，那不妨把简单的内容记录在笔记内，以供随时查阅参考。<br>因为是快速入门阶段，为快速了解体系，不会过多的深入原理。</p><h3 id="Stage-0-前置技能"><a href="#Stage-0-前置技能" class="headerlink" title="Stage 0 - 前置技能"></a>Stage 0 - 前置技能</h3><p>“一个不会编程的运维不是一个好的黑客”<br>学习安全需要搭建靶场、编写脚本、读懂代码，在正式学习之前，至少需要掌握以下几种能力</p><ul><li>虚拟机软件的使用（如 VMware、VirtualBox 等）</li><li>Linux操作系统基础（文件操作、目录切换、磁盘挂载、权限管理等）</li><li>简单服务的搭建（Apache&#x2F;Nginx、MySQL、PHP）</li></ul><p>对于虚拟机软件 Windows 下主要推荐使用 <strong>VMware Workstation</strong>，界面简单容易上手。服务的搭建可以使用集成软件如：<strong>Phpstudy</strong>、<strong>wampserver</strong> 等软件，只需要能正常访问即可。Linux 操作系统建议长期使用，熟悉在命令行对文件进行增删查改的操作。在掌握 Linux 基本命令之后对服务搭建的技能进行拓展，在 Linux 上搭建一个完整 Web Server 服务，通常是使用的是 <strong>Apache + MySQL + PHP</strong>，简称也就是 LAMP（Linux Apache MySQL PHP）。<br>关键词：<code>#Linux搭建LAMP``#VMware安装Linux</code> <code>#phpstudy搭建网站</code></p><h3 id="Stage-1-靶场学习"><a href="#Stage-1-靶场学习" class="headerlink" title="Stage 1 - 靶场学习"></a>Stage 1 - 靶场学习</h3><p>在掌握了基本服务的搭建技能后，可以通过搭建靶场来进行综合能力的学习，常见的靶场如 DVWA、Pikachu 都是不错的综合渗透测试靶场，这里以 <strong>DVWA</strong> 为例，可以通过 Phpstudy 或者 Linux 搭建 DVWA 靶场环境，在靶场内，需要学习的技能有如下</p><ul><li>Brute Force 暴力破解 <ul><li>使用 BurpSuite 利用字典进行暴力破解</li></ul></li><li>Command Injection 命令注入 <ul><li>需要掌握 Linux、Windows 操作系统下命令行的连接符使用</li></ul></li><li>CSRF<ul><li>#TODO</li></ul></li><li>File Inclusion 文件包含 <ul><li>需要对 PHP 读取文件的函数进行学习</li></ul></li><li>File Upload 文件上传 <ul><li>需要学习如何编写一个简单的后门程序，关键词为 一句话木马，针对 PHP 搭建的服务也就是 PHP一句话木马，需要使用 蚁剑、冰蝎等工具进行连接。这里推荐使用 <a href="https://github.com/AntSwordProject/antSword">蚁剑</a></li></ul></li><li>SQL Injection SQL注入 <ul><li>需要学习 SQL 基本语句，包括注释以及查询。</li></ul></li><li>XSS <ul><li>需要学习 JavaScript，如何利用 <code>&lt;script&gt;</code> 标签弹出提示框以及 Cookie</li></ul></li></ul><p>有关于靶场的学习内容，合理的利用搜索引可以轻松的获取到答案，针对 DVWA 的安全等级机制，不需要对 Medium、High、Impossible 的利用方式了然于心，但对于 Low 等级的利用方式，需要做到可以脱离任何资料而去利用。<br>关键词：<code>#phpstudy搭建DVWA``#DVWA WriteUp</code> <code>#DVWA 通关教程</code></p><h3 id="Stage-2-靶机渗透"><a href="#Stage-2-靶机渗透" class="headerlink" title="Stage 2 - 靶机渗透"></a>Stage 2 - 靶机渗透</h3><p>靶机渗透测试可以帮助你速成脚本小子，也可以让你初步了解渗透测试的基本流程，在这过程中可能会使用大量的工具辅助，以下为 DC:1 靶机作为参考的学习途径<br>下载地址：<a href="https://www.vulnhub.com/entry/dc-1,292/">https://www.vulnhub.com/entry/dc-1,292/</a></p><ol><li>VMware 或 VirtualBox 搭建靶机</li><li>网络环境正常后进行局域网存活扫描（常用的工具有 fping、arping、nmap）<ul><li><code>fping -aqg [网段/子网掩码]</code></li></ul></li><li>对靶机端口信息进行扫描 <ul><li><code>nmap -sV [Target_IP]</code></li></ul></li><li>针对 Web 服务使用 msfconsole 可利用模块 <ol><li>任意文件上传，使用蚁剑连接一句话木马</li><li>缓冲区溢出，获取目标系统 Shell</li></ol></li><li>利用 SUID 文件提升权限</li></ol><p>对靶机的渗透测试互联网上同样有大部分的参考实例，关键词为 <strong>靶机名称+WriteUp</strong> 或 <strong>靶机名称+Walkthrough</strong>，有过一次完整的打靶经验那我们就快速进入下一个阶段吧，不要过度迷恋这个感觉，毕竟靶机是打不完的。<br>工具的安装和使用并不会一帆风顺，有时需要查阅大部分的资料，对于不同环境的搭建又各有不同，可以使用集成的渗透测试系统如：Kali、Parrot等，这里推荐 <a href="https://www.kali.org/">Kali</a><br>关键词：<code>#DC-1 WriteUp``#VMware搭建DC-1``#VirtualBox搭建DC-1</code></p><h3 id="Stage-3-编程能力"><a href="#Stage-3-编程能力" class="headerlink" title="Stage 3 - 编程能力"></a>Stage 3 - 编程能力</h3><p>在愉快的脚本小子生活结束后，不要忘了巩固你的编程能力，有几门常用的语言适合作为渗透测试的辅助语言如 Python，Shell，下面推荐几个简单的脚本快速理解<br>Shell 局域网存活扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for i in &#123;1..254&#125;</span><br><span class="line">  do</span><br><span class="line">      (if ping -c 1 -W 1 10.110.2.$i &amp;&gt; /dev/null;then # 替换IP段为自身所处的IP段</span><br><span class="line">          echo &quot;10.110.2.$i is up&quot;</span><br><span class="line">      fi)&amp;</span><br><span class="line">  done</span><br><span class="line">wait</span><br></pre></td></tr></table></figure><p>Python 获取目标banner</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&quot;198.46.152.109&quot;</span>,<span class="number">22</span>)) <span class="comment"># 198.46.152.109 是我的 vps 地址，22对应的服务是 SSH</span></span><br><span class="line">banner = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(banner)</span><br></pre></td></tr></table></figure><p>Python 端口扫描</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">        s.connect((<span class="string">&quot;198.46.152.109&quot;</span>,port)) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Port:%d Open&#x27;</span> % port)</span><br><span class="line">        s.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Port:%d Close&#x27;</span> % port)</span><br></pre></td></tr></table></figure><p>编程语言的学习入门通常需要掌握数据结构，循环，错误处理。对于 Python 还需要掌握一些模块，如上面使用到的 socket、requets 等。除此之外还有一些可能会用到的语言如 Go、Java、C，因为 Python 是一门很适合编写工具的脚本语言，所以暂时不对其他语言做深入了解（当然如果你有其他方面的能力也可以直接运用在网络编程的领域）</p><h3 id="Stage-4-综合能力"><a href="#Stage-4-综合能力" class="headerlink" title="Stage 4 - 综合能力"></a>Stage 4 - 综合能力</h3><p>在掌握基本能力以后你已经可以编写简单的脚本程序来临时代替 fping、nmap 等工具来辅助你进行渗透测试（当然这并不是刚需），一入网安深似海，我的路线并不一定是最完美的，但既然我都可以总结出来，相信你也可以在此基础上更加精进来达到更高的境界。说是综合能力，其实在这时已经可以查漏补缺，弥补之前欠缺的知识，如完善理解 SQL注入的原理，通过 SQLi-Labs 等靶场进一步学习 SQL 注入，或是通过 Upload-Labs 靶场进一步学习绕过文件上传限制的方式，从这里开始学习就变得更加需要深度和广度，不妨根据前辈们的技能树，选择必备的技能以及感兴趣的方向，继续深度的学习，这里放几个我收集到的技能树，或许能给你之后的安全学习带来一点帮助</p><ul><li><a href="https://www.hackjie.com/1500.html">黑客街 web渗透学习路线图</a></li><li><a href="https://evilcos.me/security_skill_tree_basic/index.html">余弦的安全技能树简版</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Planning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Roadmap </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
